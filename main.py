# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'MyApp.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QRunnable, QThreadPool, QObject, pyqtSignal, pyqtSlot, QTimer, Qt, QUrl
from PyQt5.QtGui import QIcon, QPixmap, QImage, QMovie, QDesktopServices
from PyQt5.QtWidgets import QMessageBox, QMainWindow
from detection import run_inference  # Import the backend function
from multiprocessing import Process, Queue
from queue import Empty
import cv2
import sys
import os
import resources_rc
import time
import numpy as np
import yaml

class Ui_MainWindow(QMainWindow):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setMinimumSize(QtCore.QSize(1920, 1080))
        # MainWindow.setFixedSize(QtCore.QSize(2500, 1400))
        MainWindow.setContextMenuPolicy(QtCore.Qt.PreventContextMenu)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/icons/img/NL_logo.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setWindowOpacity(1.0)
        MainWindow.setAutoFillBackground(False)

        # ðŸ”´ REMOVE setStyleSheet (because it does not support resizing)
        
        # âœ… Add QLabel for the background
        self.bg_label = QtWidgets.QLabel(MainWindow)
        self.bg_label.setGeometry(0, 0, MainWindow.width(), MainWindow.height())
        self.bg_label.setScaledContents(True)  # Ensures the image scales dynamically

        # Load background image
        self.bg_pixmap = QtGui.QPixmap(":/icons/img/background-img (2).png")
        self.bg_label.setPixmap(self.bg_pixmap)

        # Keep the label at the back
        self.bg_label.lower()

        # âœ… Update background when resizing
        MainWindow.resizeEvent = self.resizeEvent

        MainWindow.setIconSize(QtCore.QSize(50, 50))
        MainWindow.setAnimated(False)
        MainWindow.setTabShape(QtWidgets.QTabWidget.Rounded)
        MainWindow.setDockNestingEnabled(False)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.centralwidget.sizePolicy().hasHeightForWidth())
        self.centralwidget.setSizePolicy(sizePolicy)
        self.centralwidget.setAutoFillBackground(False)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setSpacing(0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.menu_frame = QtWidgets.QFrame(self.centralwidget)
        self.menu_frame.setMinimumSize(QtCore.QSize(380, 0))
        self.menu_frame.setMaximumSize(QtCore.QSize(360, 16777215))
        self.menu_frame.setStyleSheet("QFrame {\n"
"    background-color: rgba(43, 48, 55, 0.6); /* Charcoal Black with transparency for a sleek effect */\n"
"    /* filter: blur(5px); /* Reduced blur for clarity */\n"
"    height: 100vh;\n"
"    width: 250px; /* Sidebar-style menu width */\n"
"    /* transition: background-color 0.3s ease, /* filter 0.3s ease; /* Smooth /* transition */\n"
"    /* border-radius: 12px; /* Rounded corners */\n"
"}\n"
"\n"
"/* Focus effect for better visibility */\n"
"QFrame:focus {\n"
"    background-color: rgba(31, 42, 68, 0.8); /* Midnight Blue for emphasis */\n"
"}")
        self.menu_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.menu_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.menu_frame.setObjectName("menu_frame")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.menu_frame)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.tabWidget = QtWidgets.QTabWidget(self.menu_frame)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        self.tabWidget.setFont(font)
        self.tabWidget.setStyleSheet("/* Center align the tab bar */\n"
"QTabWidget::tab-bar {\n"
"    alignment: center;\n"
"}\n"
"\n"
"/* Style each tab */\n"
"QTabBar::tab {\n"
"    color: #4d5966; /* Gunmetal Gray for text */\n"
"    border-radius: 12px; /* Slightly more rounded corners */\n"
"    padding: 5px 20px; /* Increased padding for proper text spacing */\n"
"    background-color: rgba(43, 48, 55, 0.7); /* Charcoal Black with transparency */\n"
"    /* transition: all 0.2s ease-in-out; /* Smooth hover and active transitions */\n"
"    font: 14px; /* Consistent font size and family */\n"
"    min-width: 100px; /* Ensure enough width for text */\n"
"    min-height: 40px; /* Ensure enough height for text */\n"
"    text-align: center; /* Center-align text */\n"
"}\n"
"\n"
"/* Hover effect for tabs */\n"
"QTabBar::tab:hover {\n"
"    background-color: rgba(0, 255, 204, 0.2); /* Neon Aqua with slight transparency */\n"
"    color: #ffffff; /* White text for contrast */\n"
"    border: 2px solid #27b2fd; /* Blue border */\n"
"}\n"
"\n"
"/* Active (selected) tab */\n"
"QTabBar::tab:selected {\n"
"    font: bold 14px; /* Bold font for emphasis */\n"
"    color: #f1b531; /* Golden Yellow for active tab text */\n"
"    \n"
"    background-color: rgba(31, 42, 68, 0.9); /* Slightly darker Midnight Blue background */\n"
"    /* box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3); /* Subtle shadow for depth */\n"
"    padding: 8px 18px; /* Adjusted padding for better fit */\n"
"}\n"
"\n"
"/* Style the tab pane (content area) */\n"
"QTabWidget::pane {\n"
"    border: 2px solid #00ffcc; /* Neon Aqua border */\n"
"    background-color: rgba(43, 48, 55, 0.7); /* Charcoal Black */\n"
"    border-radius: 10px; /* Rounded corners */\n"
"    margin: 0px; /* Remove any margin */\n"
"}\n"
"\n"
"/* Remove padding inside QTabWidget */\n"
"QTabWidget QWidget {\n"
"    background-color: transparent; /* Transparent inner content */\n"
"    color: #f1f1f1; /* Light text */\n"
"    margin: 0px;\n"
"    padding: 0px;\n"
"}")
        self.tabWidget.setTabPosition(QtWidgets.QTabWidget.North)
        self.tabWidget.setTabShape(QtWidgets.QTabWidget.Rounded)
        self.tabWidget.setIconSize(QtCore.QSize(25, 25))
        self.tabWidget.setObjectName("tabWidget")
        self.realtime_tab = QtWidgets.QWidget()
        self.realtime_tab.setObjectName("realtime_tab")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.realtime_tab)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.toolBox_3 = QtWidgets.QToolBox(self.realtime_tab)
        self.toolBox_3.setMinimumSize(QtCore.QSize(280, 0))
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(12)
        self.toolBox_3.setFont(font)
        self.toolBox_3.setStyleSheet("/* Style the QToolBox tab headers */\n"
"QToolBox::tab {\n"
"    color: #4d5966; /* Gunmetal Gray for text to maintain a modern look */\n"
"    border-radius: 10px; /* Slight rounding on tabs */\n"
"    padding: 5px 10px; /* Space inside the tabs */\n"
"    background-color: rgba(43, 48, 55, 0.7); /* Charcoal Black with transparency for the tab background */\n"
"    /* transition: background-color 0.2s ease-in-out; /* Smooth hover /* transition */\n"
"}\n"
"\n"
"/* Hover state for tabs */\n"
"QToolBox::tab:hover {\n"
"    background-color: rgba(0, 255, 204, 0.2); /* Neon Aqua with slight transparency for hover */\n"
"    color: #FFFFFF; /* White text for contrast */\n"
"}\n"
"\n"
"/* Style the active tab header */\n"
"QToolBox::tab:selected {\n"
"    font: bold 16px;\n"
"    color: #f1b531; /* Golden Yellow for active tab text */\n"
"    border: 2px solid #00ffcc; /* Neon Aqua for the active tab border */\n"
"    background-color: rgba(31, 42, 68, 0.8); /* Midnight Blue for active tab background */\n"
"    /* box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3); /* Subtle shadow effect for emphasis */\n"
"}\n"
"\n"
"/* Style the content inside the QToolBox */\n"
"QToolBox QWidget {\n"
"    border-radius: 8px;\n"
"    /* filter: blur(5px); /* Lighter blur effect */\n"
"}")
        self.toolBox_3.setFrameShape(QtWidgets.QFrame.Panel)
        self.toolBox_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.toolBox_3.setObjectName("toolBox_3")
        self.realtime_setting_heading = QtWidgets.QWidget()
        self.realtime_setting_heading.setGeometry(QtCore.QRect(0, 0, 336, 629))
        self.realtime_setting_heading.setObjectName("realtime_setting_heading")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.realtime_setting_heading)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.label_21 = QtWidgets.QLabel(self.realtime_setting_heading)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(1)
        font.setBold(True)
        font.setWeight(75)
        self.label_21.setFont(font)
        self.label_21.setStyleSheet("QLabel {\n"
"    color: #15e7e0; /* Matching logo color */\n"
"    font-size: 18px;\n"
"    font-weight: bold;\n"
"    background: transparent;\n"
"    padding-right: 5px; /* Spacing between label and input field */\n"
"}")
        self.label_21.setScaledContents(True)
        self.label_21.setWordWrap(False)
        self.label_21.setObjectName("label_21")
        self.verticalLayout_5.addWidget(self.label_21, 0, QtCore.Qt.AlignHCenter)
        self.horizontalLayout_13 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_13.setObjectName("horizontalLayout_13")
        self.label_2 = QtWidgets.QLabel(self.realtime_setting_heading)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(1)
        font.setBold(False)
        font.setWeight(50)
        self.label_2.setFont(font)
        self.label_2.setStyleSheet("QLabel {\n"
"    color: #15e7e0; /* Matching logo color */\n"
"    font-size: 14px;\n"
"    font-weight: normal;\n"
"    background: transparent;\n"
"    padding-right: 5px; /* Spacing between label and input field */\n"
"}")
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_13.addWidget(self.label_2)
        self.realtime_lineedit1 = QtWidgets.QLineEdit(self.realtime_setting_heading)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(1)
        font.setBold(False)
        font.setWeight(50)
        self.realtime_lineedit1.setFont(font)
        self.realtime_lineedit1.setStyleSheet("QLineEdit {\n"
"    color: #15e7e0; /* Text color matching the logo */\n"
"    font-size: 14px;\n"
"    font-weight: normal;\n"
"    background: transparent; /* No background */\n"
"    border: none; /* No border */\n"
"    border-bottom: 2px solid #27b2fd; /* Subtle underline effect */\n"
"    padding: 5px;\n"
"    selection-background-color: #42ddbc; /* Highlighted text background */\n"
"}\n"
"\n"
"/* Style for when the QLineEdit is focused (active input) */\n"
"QLineEdit:focus {\n"
"    border-bottom: 2px solid #f1b531; /* Change to golden yellow when active */\n"
"    color: #91ecfe; /* Slightly lighter text color */\n"
"}")
        self.realtime_lineedit1.setObjectName("realtime_lineedit1")
        self.horizontalLayout_13.addWidget(self.realtime_lineedit1)
        self.verticalLayout_5.addLayout(self.horizontalLayout_13)
        self.horizontalLayout_14 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_14.setObjectName("horizontalLayout_14")
        self.label_11 = QtWidgets.QLabel(self.realtime_setting_heading)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(1)
        font.setBold(False)
        font.setWeight(50)
        self.label_11.setFont(font)
        self.label_11.setStyleSheet("QLabel {\n"
"    color: #15e7e0; /* Matching logo color */\n"
"    font-size: 14px;\n"
"    font-weight: normal;\n"
"    background: transparent;\n"
"    padding-right: 5px; /* Spacing between label and input field */\n"
"}")
        self.label_11.setObjectName("label_11")
        self.horizontalLayout_14.addWidget(self.label_11)
        self.realtime_lineedit2 = QtWidgets.QLineEdit(self.realtime_setting_heading)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(1)
        font.setBold(False)
        font.setWeight(50)
        self.realtime_lineedit2.setFont(font)
        self.realtime_lineedit2.setStyleSheet("QLineEdit {\n"
"    color: #15e7e0; /* Text color matching the logo */\n"
"    font-size: 14px;\n"
"    font-weight: normal;\n"
"    background: transparent; /* No background */\n"
"    border: none; /* No border */\n"
"    border-bottom: 2px solid #27b2fd; /* Subtle underline effect */\n"
"    padding: 5px;\n"
"    selection-background-color: #42ddbc; /* Highlighted text background */\n"
"}\n"
"\n"
"/* Style for when the QLineEdit is focused (active input) */\n"
"QLineEdit:focus {\n"
"    border-bottom: 2px solid #f1b531; /* Change to golden yellow when active */\n"
"    color: #91ecfe; /* Slightly lighter text color */\n"
"}")
        self.realtime_lineedit2.setObjectName("realtime_lineedit2")
        self.horizontalLayout_14.addWidget(self.realtime_lineedit2)
        self.verticalLayout_5.addLayout(self.horizontalLayout_14)
        spacerItem = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.verticalLayout_5.addItem(spacerItem)
        self.label_12 = QtWidgets.QLabel(self.realtime_setting_heading)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(1)
        font.setBold(True)
        font.setWeight(75)
        self.label_12.setFont(font)
        self.label_12.setStyleSheet("QLabel {\n"
"    color: #15e7e0; /* Matching logo color */\n"
"    font-size: 18px;\n"
"    font-weight: bold;\n"
"    background: transparent;\n"
"    padding-right: 5px; /* Spacing between label and input field */\n"
"}")
        self.label_12.setObjectName("label_12")
        self.verticalLayout_5.addWidget(self.label_12, 0, QtCore.Qt.AlignHCenter|QtCore.Qt.AlignVCenter)
        spacerItem1 = QtWidgets.QSpacerItem(20, 5, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.verticalLayout_5.addItem(spacerItem1)
        self.realtime_modelselection = QtWidgets.QComboBox(self.realtime_setting_heading)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(1)
        font.setBold(True)
        font.setWeight(75)
        self.realtime_modelselection.setFont(font)
        self.realtime_modelselection.setStyleSheet("/* Base QComboBox Style */\n"
"QComboBox {\n"
"    color: #15e7e0; /* Text color from logo */\n"
"    font-size: 14px;\n"
"    font-weight: bold;\n"
"    background: transparent; /* No background */\n"
"    border: 2px solid #27b2fd; /* Subtle blue border */\n"
"    border-radius: 5px;\n"
"    padding: 5px 10px;\n"
"}\n"
"\n"
"/* Remove the default dropdown button background */\n"
"QComboBox::drop-down {\n"
"    border: none;\n"
"    background: transparent;\n"
"}\n"
"\n"
"/* Dropdown List */\n"
"QComboBox QAbstractItemView {\n"
"    background-color: rgba(31, 42, 68, 0.9); /* Midnight blue with transparency */\n"
"    border: 2px solid #27b2fd; /* Blue border */\n"
"    selection-background-color: #f1b531; /* Golden yellow highlight */\n"
"    selection-color: #ffffff; /* White text */\n"
"    border-radius: 5px;\n"
"    padding: 5px;\n"
"}\n"
"\n"
"/* Hover and Focus Effects */\n"
"QComboBox:hover, QComboBox:focus {\n"
"    border: 2px solid #f1b531; /* Change border color when active */\n"
"    color: #91ecfe; /* Slightly lighter text color */\n"
"}")
        self.realtime_modelselection.setObjectName("realtime_modelselection")
        self.verticalLayout_5.addWidget(self.realtime_modelselection)
        spacerItem2 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.verticalLayout_5.addItem(spacerItem2)
        self.label_22 = QtWidgets.QLabel(self.realtime_setting_heading)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(1)
        font.setBold(True)
        font.setWeight(75)
        self.label_22.setFont(font)
        self.label_22.setStyleSheet("QLabel {\n"
"    color: #15e7e0; /* Matching logo color */\n"
"    font-size: 18px;\n"
"    font-weight: bold;\n"
"    background: transparent;\n"
"    padding-right: 5px; /* Spacing between label and input field */\n"
"}")
        self.label_22.setObjectName("label_22")
        self.verticalLayout_5.addWidget(self.label_22, 0, QtCore.Qt.AlignHCenter)
        spacerItem3 = QtWidgets.QSpacerItem(20, 5, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.verticalLayout_5.addItem(spacerItem3)
        self.horizontalLayout_23 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_23.setObjectName("horizontalLayout_23")
        self.label_25 = QtWidgets.QLabel(self.realtime_setting_heading)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(1)
        font.setBold(False)
        font.setWeight(50)
        self.label_25.setFont(font)
        self.label_25.setStyleSheet("QLabel {\n"
"    color: #15e7e0; /* Matching logo color */\n"
"    font-size: 14px;\n"
"    font-weight: normal;\n"
"    background: transparent;\n"
"    padding-right: 5px; /* Spacing between label and input field */\n"
"}")
        self.label_25.setObjectName("label_25")
        self.horizontalLayout_23.addWidget(self.label_25, 0, QtCore.Qt.AlignRight)
        spacerItem4 = QtWidgets.QSpacerItem(2, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_23.addItem(spacerItem4)
        self.realtime_conf_spinbox = QtWidgets.QSpinBox(self.realtime_setting_heading)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(1)
        self.realtime_conf_spinbox.setFont(font)
        self.realtime_conf_spinbox.setStyleSheet("/* Style for the QSpinBox container */\n"
"QSpinBox {\n"
"    color: #f1f1f1;  /* Light text color */\n"
"    background-color: transparent;  /* No background */\n"
"    border: none;  /* No border */\n"
"    font-size: 16px;  /* Set font size */\n"
"    padding: 5px;  /* Padding inside the spin box */\n"
"}\n"
"\n"
"/* Style for the up and down buttons in the QSpinBox */\n"
"QSpinBox::up-button, QSpinBox::down-button {\n"
"    background-color: rgba(43, 48, 55, 0.7); /* Charcoal Black with transparency */\n"
"    border: none;  /* No border */\n"
"    width: 20px;  /* Set width for buttons */\n"
"    height: 20px;  /* Set height for buttons */\n"
"    color: #f1f1f1;  /* Light text color for button */\n"
"}\n"
"\n"
"/* Hover effect for the up and down buttons */\n"
"QSpinBox::up-button:hover, QSpinBox::down-button:hover {\n"
"    background-color: rgba(0, 255, 204, 0.2);  /* Neon Aqua with slight transparency */\n"
"    color: #ffffff;  /* White text for contrast */\n"
"}\n"
"\n"
"/* Style when the spinbox is focused (i.e., clicked or active) */\n"
"QSpinBox:focus {\n"
"    border: 2px solid #00ffcc;  /* Neon Aqua border */\n"
"    background-color: rgba(31, 42, 68, 0.8); /* Slightly darker Midnight Blue background */\n"
"    color: #f1b531;  /* Golden Yellow text */\n"
"}")
        self.realtime_conf_spinbox.setObjectName("realtime_conf_spinbox")
        self.horizontalLayout_23.addWidget(self.realtime_conf_spinbox)
        self.realtime_conf_horizontalslider = QtWidgets.QSlider(self.realtime_setting_heading)
        self.realtime_conf_horizontalslider.setStyleSheet("/* Base style for QSlider */\n"
"QSlider {\n"
"    background: transparent; /* No background */\n"
"    border: none;\n"
"    height: 8px; /* Slider height */\n"
"}\n"
"\n"
"/* Handle of the slider */\n"
"QSlider::handle {\n"
"    background: #42ddbc; /* Color matching the logo */\n"
"    border: 2px solid #27b2fd; /* Blue border */\n"
"    width: 18px; /* Handle size */\n"
"    height: 18px;\n"
"    border-radius: 9px; /* Rounded handle */\n"
"    margin: -5px 0; /* Adjust handle positioning */\n"
"}\n"
"\n"
"/* Hover effect for the slider handle */\n"
"QSlider::handle:hover {\n"
"    background: #f1b531; /* Golden Yellow on hover */\n"
"    border: 2px solid #00ffcc; /* Neon Aqua border */\n"
"}\n"
"\n"
"/* Slider groove (the background of the slider) */\n"
"QSlider::groove:horizontal {\n"
"    border-radius: 4px;\n"
"    background: rgba(43, 48, 55, 0.7); /* Charcoal Black with transparency */\n"
"    height: 8px;\n"
"}\n"
"\n"
"/* Style the slider groove when the slider is active */\n"
"QSlider::groove:horizontal:active {\n"
"    background: rgba(31, 42, 68, 0.8); /* Darker shade for active groove */\n"
"}\n"
"\n"
"/* Style for the tick marks on the slider (if enabled) */\n"
"QSlider::tick {\n"
"    background: #27b2fd; /* Blue color for ticks */\n"
"}\n"
"\n"
"/* Style the ticks on hover */\n"
"QSlider::tick:hover {\n"
"    background: #f1b531; /* Golden Yellow for tick hover */\n"
"}")
        self.realtime_conf_horizontalslider.setOrientation(QtCore.Qt.Horizontal)
        self.realtime_conf_horizontalslider.setObjectName("realtime_conf_horizontalslider")
        self.horizontalLayout_23.addWidget(self.realtime_conf_horizontalslider)
        self.verticalLayout_5.addLayout(self.horizontalLayout_23)
        self.horizontalLayout_22 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_22.setObjectName("horizontalLayout_22")
        self.label_24 = QtWidgets.QLabel(self.realtime_setting_heading)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(1)
        font.setBold(False)
        font.setWeight(50)
        self.label_24.setFont(font)
        self.label_24.setStyleSheet("QLabel {\n"
"    color: #15e7e0; /* Matching logo color */\n"
"    font-size: 14px;\n"
"    font-weight: normal;\n"
"    background: transparent;\n"
"    padding-right: 5px; /* Spacing between label and input field */\n"
"}")
        self.label_24.setObjectName("label_24")
        self.horizontalLayout_22.addWidget(self.label_24, 0, QtCore.Qt.AlignRight)
        spacerItem5 = QtWidgets.QSpacerItem(11, 5, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_22.addItem(spacerItem5)
        self.realtime_iou_spinbox = QtWidgets.QSpinBox(self.realtime_setting_heading)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(1)
        self.realtime_iou_spinbox.setFont(font)
        self.realtime_iou_spinbox.setStyleSheet("/* Style for the QSpinBox container */\n"
"QSpinBox {\n"
"    color: #f1f1f1;  /* Light text color */\n"
"    background-color: transparent;  /* No background */\n"
"    border: none;  /* No border */\n"
"    font-size: 16px;  /* Set font size */\n"
"    padding: 5px;  /* Padding inside the spin box */\n"
"}\n"
"\n"
"/* Style for the up and down buttons in the QSpinBox */\n"
"QSpinBox::up-button, QSpinBox::down-button {\n"
"    background-color: rgba(43, 48, 55, 0.7); /* Charcoal Black with transparency */\n"
"    border: none;  /* No border */\n"
"    width: 20px;  /* Set width for buttons */\n"
"    height: 20px;  /* Set height for buttons */\n"
"    color: #f1f1f1;  /* Light text color for button */\n"
"}\n"
"\n"
"/* Hover effect for the up and down buttons */\n"
"QSpinBox::up-button:hover, QSpinBox::down-button:hover {\n"
"    background-color: rgba(0, 255, 204, 0.2);  /* Neon Aqua with slight transparency */\n"
"    color: #ffffff;  /* White text for contrast */\n"
"}\n"
"\n"
"/* Style when the spinbox is focused (i.e., clicked or active) */\n"
"QSpinBox:focus {\n"
"    border: 2px solid #00ffcc;  /* Neon Aqua border */\n"
"    background-color: rgba(31, 42, 68, 0.8); /* Slightly darker Midnight Blue background */\n"
"    color: #f1b531;  /* Golden Yellow text */\n"
"}")
        self.realtime_iou_spinbox.setObjectName("realtime_iou_spinbox")
        self.horizontalLayout_22.addWidget(self.realtime_iou_spinbox)
        self.realtime_iou_horizontalslider = QtWidgets.QSlider(self.realtime_setting_heading)
        self.realtime_iou_horizontalslider.setStyleSheet("/* Base style for QSlider */\n"
"QSlider {\n"
"    background: transparent; /* No background */\n"
"    border: none;\n"
"    height: 8px; /* Slider height */\n"
"}\n"
"\n"
"/* Handle of the slider */\n"
"QSlider::handle {\n"
"    background: #42ddbc; /* Color matching the logo */\n"
"    border: 2px solid #27b2fd; /* Blue border */\n"
"    width: 18px; /* Handle size */\n"
"    height: 18px;\n"
"    border-radius: 9px; /* Rounded handle */\n"
"    margin: -5px 0; /* Adjust handle positioning */\n"
"}\n"
"\n"
"/* Hover effect for the slider handle */\n"
"QSlider::handle:hover {\n"
"    background: #f1b531; /* Golden Yellow on hover */\n"
"    border: 2px solid #00ffcc; /* Neon Aqua border */\n"
"}\n"
"\n"
"/* Slider groove (the background of the slider) */\n"
"QSlider::groove:horizontal {\n"
"    border-radius: 4px;\n"
"    background: rgba(43, 48, 55, 0.7); /* Charcoal Black with transparency */\n"
"    height: 8px;\n"
"}\n"
"\n"
"/* Style the slider groove when the slider is active */\n"
"QSlider::groove:horizontal:active {\n"
"    background: rgba(31, 42, 68, 0.8); /* Darker shade for active groove */\n"
"}\n"
"\n"
"/* Style for the tick marks on the slider (if enabled) */\n"
"QSlider::tick {\n"
"    background: #27b2fd; /* Blue color for ticks */\n"
"}\n"
"\n"
"/* Style the ticks on hover */\n"
"QSlider::tick:hover {\n"
"    background: #f1b531; /* Golden Yellow for tick hover */\n"
"}")
        self.realtime_iou_horizontalslider.setOrientation(QtCore.Qt.Horizontal)
        self.realtime_iou_horizontalslider.setObjectName("realtime_iou_horizontalslider")
        self.horizontalLayout_22.addWidget(self.realtime_iou_horizontalslider)
        self.verticalLayout_5.addLayout(self.horizontalLayout_22)
        spacerItem6 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.verticalLayout_5.addItem(spacerItem6)
        self.no_recording_radiobutton = QtWidgets.QRadioButton(self.realtime_setting_heading)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(1)
        font.setBold(True)
        font.setWeight(75)
        self.no_recording_radiobutton.setFont(font)
        self.no_recording_radiobutton.setStyleSheet("/* Style for QRadioButton (checkbox style) */\n"
"QRadioButton {\n"
"    color: #15e7e0;  /* Light text color */\n"
"    font-size: 16px;  /* Set font size */\n"
"    padding: 5px 20px;  /* Add padding */\n"
"    border: none;  /* No border */\n"
"    background: transparent;  /* Transparent background */\n"
"    spacing: 10px;  /* Space between checkbox and label */\n"
"    margin-left: 10px;  /* Ensure there\'s space for the text */\n"
"}\n"
"\n"
"/* Style for the checkbox indicator (unchecked) */\n"
"QRadioButton::indicator {\n"
"    width: 18px;  /* Set the size of the checkbox */\n"
"    height: 18px;  /* Set the size of the checkbox */\n"
"    border: 2px solid #27b2fd;  /* Subtle blue border */\n"
"    border-radius: 10px;  /* Slightly rounded corners for checkbox */\n"
"    background-color: transparent;  /* Transparent background */\n"
"}\n"
"\n"
"/* Style for the checkbox indicator when checked */\n"
"QRadioButton::indicator:checked {\n"
"    background-color: #f1b531;  /* Golden yellow background when checked */\n"
"    border: 2px solid #f1b531;  /* Golden yellow border */\n"
"    /*image: url(:/icons/icons/crossed (1).ico);  /* Optional: Add a checkmark image */\n"
"}\n"
"\n"
"/* Hover effect for QRadioButton */\n"
"QRadioButton:hover {\n"
"    color: #f1b531;  /* Change text color to golden yellow on hover */\n"
"}\n"
"\n"
"/* Focused state (when the checkbox is focused) */\n"
"QRadioButton:focus {\n"
"    outline: none;  /* Remove outline when focused */\n"
"}\n"
"\n"
"/* Disabled state for QRadioButton */\n"
"QRadioButton:disabled {\n"
"    color: #4d5966;  /* Dim the text color to indicate disabled state */\n"
"}\n"
"")
        self.no_recording_radiobutton.setObjectName("no_recording_radiobutton")
        self.verticalLayout_5.addWidget(self.no_recording_radiobutton)
        spacerItem7 = QtWidgets.QSpacerItem(20, 250, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_5.addItem(spacerItem7)
        self.realtime_archive_pushbutton = QtWidgets.QPushButton(self.realtime_setting_heading)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(1)
        font.setBold(True)
        font.setWeight(75)
        self.realtime_archive_pushbutton.setFont(font)
        self.realtime_archive_pushbutton.setStyleSheet("/* Default QPushButton style */\n"
"QPushButton {\n"
"    color: #15e7e0; /* Primary logo color */\n"
"    text-align: left; /* Align text to the left */\n"
"    background: transparent; /* No background */\n"
"    border: none; /* No border */\n"
"    font-size: 16px; /* Default font size */\n"
"    font-weight: bold; /* Bold text */\n"
"    padding: 5px 10px 5px 26px; /* Add padding to the left for the larger icon */\n"
"    image: url(:/icons/icons/archive (5).ico); /* Default icon */\n"
"    image-position: left center; /* Position the icon to the left */\n"
"    min-width: 30px; /* Ensure the icon area is wide enough */\n"
"    min-height: 30px; /* Ensure the icon area is tall enough */\n"
"}\n"
"\n"
"/* Hover effect for QPushButton */\n"
"QPushButton:hover {\n"
"    color: #f1b531; /* Highlight with logo\'s aqua color */\n"
"    font-weight: bold; /* Bold text on hover */\n"
"    image: url(:/icons/icons/archive (3).ico); /* Hover icon */\n"
"    background-color: rgba(241, 181, 49, 0.1); /* Subtle hover background */\n"
"    border-radius: 4px; /* Rounded corners on hover */\n"
"}\n"
"\n"
"/* Pressed state for QPushButton */\n"
"QPushButton:pressed {\n"
"    color: #27b2fd; /* Brighter blue for pressed effect */\n"
"    font-size: 16px; /* Reset font size */\n"
"    background-color: rgba(39, 178, 253, 0.1); /* Subtle pressed background */\n"
"    border-radius: 4px; /* Rounded corners on press */\n"
"    image: url(:/icons/icons/archive (5).ico); /* Default icon */\n"
"}\n"
"\n"
"/* Disabled state for QPushButton */\n"
"QPushButton:disabled {\n"
"    color: #15e7e0; /* Primary logo color with reduced opacity */\n"
"    opacity: 0.5; /* Reduce opacity for disabled state */\n"
"    image: url(:/icons/icons/archive (5).ico); /* Default icon */\n"
"}")
        self.realtime_archive_pushbutton.setIconSize(QtCore.QSize(50, 50))
        self.realtime_archive_pushbutton.setObjectName("realtime_archive_pushbutton")
        self.verticalLayout_5.addWidget(self.realtime_archive_pushbutton, 0, QtCore.Qt.AlignHCenter|QtCore.Qt.AlignVCenter)
        self.toolBox_3.addItem(self.realtime_setting_heading, "")
        self.filter_header_3 = QtWidgets.QWidget()
        self.filter_header_3.setGeometry(QtCore.QRect(0, 0, 336, 629))
        self.filter_header_3.setObjectName("filter_header_3")
        self.verticalLayout_14 = QtWidgets.QVBoxLayout(self.filter_header_3)
        self.verticalLayout_14.setObjectName("verticalLayout_14")
        self.realtime_ClassNames_radiobutton = QtWidgets.QRadioButton(self.filter_header_3)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(1)
        self.realtime_ClassNames_radiobutton.setFont(font)
        self.realtime_ClassNames_radiobutton.setStyleSheet("/* Style for QRadioButton (checkbox style) */\n"
"QRadioButton {\n"
"    color: #15e7e0;  /* Light text color */\n"
"    font-size: 16px;  /* Set font size */\n"
"    padding: 5px 20px;  /* Add padding */\n"
"    border: none;  /* No border */\n"
"    background: transparent;  /* Transparent background */\n"
"    spacing: 10px;  /* Space between checkbox and label */\n"
"    margin-left: 10px;  /* Ensure there\'s space for the text */\n"
"}\n"
"\n"
"/* Style for the checkbox indicator (unchecked) */\n"
"QRadioButton::indicator {\n"
"    width: 18px;  /* Set the size of the checkbox */\n"
"    height: 18px;  /* Set the size of the checkbox */\n"
"    border: 2px solid #27b2fd;  /* Subtle blue border */\n"
"    border-radius: 10px;  /* Slightly rounded corners for checkbox */\n"
"    background-color: transparent;  /* Transparent background */\n"
"}\n"
"\n"
"/* Style for the checkbox indicator when checked */\n"
"QRadioButton::indicator:checked {\n"
"    background-color: #f1b531;  /* Golden yellow background when checked */\n"
"    border: 2px solid #f1b531;  /* Golden yellow border */\n"
"    image: url(:/path/to/checkmark.png);  /* Optional: Add a checkmark image */\n"
"}\n"
"\n"
"/* Hover effect for QRadioButton */\n"
"QRadioButton:hover {\n"
"    color: #f1b531;  /* Change text color to golden yellow on hover */\n"
"}\n"
"\n"
"/* Focused state (when the checkbox is focused) */\n"
"QRadioButton:focus {\n"
"    outline: none;  /* Remove outline when focused */\n"
"}\n"
"\n"
"/* Disabled state for QRadioButton */\n"
"QRadioButton:disabled {\n"
"    color: #4d5966;  /* Dim the text color to indicate disabled state */\n"
"}\n"
"")
        self.realtime_ClassNames_radiobutton.setObjectName("realtime_ClassNames_radiobutton")
        self.verticalLayout_14.addWidget(self.realtime_ClassNames_radiobutton)
        self.toolBox_3.addItem(self.filter_header_3, "")
        self.verticalLayout_3.addWidget(self.toolBox_3)
        spacerItem8 = QtWidgets.QSpacerItem(20, 5, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.verticalLayout_3.addItem(spacerItem8)
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.realtime_reset_button_2 = QtWidgets.QPushButton(self.realtime_tab)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.realtime_reset_button_2.setFont(font)
        self.realtime_reset_button_2.setStyleSheet("/* Base style for QPushButton */\n"
"QPushButton {\n"
"    background-color: #2b3037; /* Charcoal Black background for a modern, robust feel */\n"
"    color: #f1b531; /* White text for clarity */\n"
"    border: 2px solid #f1b531; /* Golden Yellow border for a vibrant contrast */\n"
"    border-radius: 10px; /* Smooth rounded corners */\n"
"    padding: 12px 24px; /* Adjust padding for size */\n"
"    /* font: bold 14px \"Segoe UI\", Arial, sans-serif; /* Clean modern font */\n"
"    letter-spacing: 1px; /* Slight letter spacing for elegance */\n"
"    text-transform: uppercase; /* Capitalized text for emphasis */\n"
"    /* transition: all 0.3s ease; /* Smooth animations */\n"
"}\n"
"\n"
"/* Hover effect */\n"
"QPushButton:hover {\n"
"    background-color: #f1b531; /* Golden Yellow for the hover background */\n"
"    color: #1f2a44; /* Midnight Blue text for contrast */\n"
"    border-color: #e6c31b; /* Softer Golden Yellow border on hover */\n"
"    /* transform: translateY(-2px); /* Lift the button slightly */\n"
"    /* box-shadow: 0px 8px 15px rgba(241, 181, 49, 0.3); /* Soft golden glow effect */\n"
"}\n"
"\n"
"/* Pressed (clicked) effect */\n"
"QPushButton:pressed {\n"
"    background-color: #1f2a44; /* Midnight Blue background on press */\n"
"    color: #ffffff; /* White text for contrast */\n"
"    border-color: #4d5966; /* Gunmetal Gray border on press */\n"
"    /* transform: translateY(2px); /* Slight press effect */\n"
"    /* box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2); /* Subtle shadow */\n"
"}\n"
"\n"
"/* Disabled state */\n"
"QPushButton:disabled {\n"
"    background-color: #4d5966; /* Gunmetal Gray for disabled state */\n"
"    color: #ffffff; /* White text */\n"
"    border-color: #4d5966; /* Matching border */\n"
"    /* box-shadow: none; /* No shadow for disabled */\n"
"}")
        self.realtime_reset_button_2.setObjectName("realtime_reset_button_2")
        self.horizontalLayout_8.addWidget(self.realtime_reset_button_2)
        self.realtime_apply_button = QtWidgets.QPushButton(self.realtime_tab)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(12)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.realtime_apply_button.setFont(font)
        self.realtime_apply_button.setStyleSheet("/* Base style for QPushButton */\n"
"QPushButton {\n"
"    background-color: #2b3037; /* Charcoal Black background for a modern, robust feel */\n"
"    color: #00ffcc; /* Neon Aqua text for a vibrant, futuristic look */\n"
"    border: 2px solid #00ffcc; /* Neon Aqua border to maintain consistency */\n"
"    border-radius: 10px; /* Smooth rounded corners */\n"
"    padding: 12px 24px; /* Adjust padding for size */\n"
"    /* font: bold 14px \"Cascadia Code\", Arial, sans-serif; /* Clean modern font */\n"
"    letter-spacing: 1px; /* Slight letter spacing for elegance */\n"
"    text-transform: uppercase; /* Capitalized text for emphasis */\n"
"    /* transition: all 0.3s ease; /* Smooth animations */\n"
"}\n"
"\n"
"/* Hover effect */\n"
"QPushButton:hover {\n"
"    background-color: #00ffcc; /* Neon Aqua for the hover background */\n"
"    color: #1f2a44; /* Midnight Blue for contrast text */\n"
"    border-color: #00ffcc; /* Keep the border the same on hover */\n"
"    /* transform: translateY(-2px); /* Lift the button slightly */\n"
"    /* box-shadow: 0px 8px 15px rgba(0, 255, 204, 0.3); /* Soft glow effect */\n"
"}\n"
"\n"
"/* Pressed (clicked) effect */\n"
"QPushButton:pressed {\n"
"    background-color: #1f2a44; /* Midnight Blue background on press */\n"
"    color: #ffffff; /* White text for contrast */\n"
"    border-color: #4d5966; /* Gunmetal Gray border on press */\n"
"    /* transform: translateY(2px); /* Slight press effect */\n"
"    /* box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2); /* Subtle shadow */\n"
"}\n"
"\n"
"/* Disabled state */\n"
"QPushButton:disabled {\n"
"    background-color: #4d5966; /* Gunmetal Gray for disabled state */\n"
"    color: #ffffff; /* White text */\n"
"    border-color: #4d5966; /* Matching border */\n"
"    /* box-shadow: none; /* No shadow for disabled */\n"
"}")
        self.realtime_apply_button.setObjectName("realtime_apply_button")
        self.horizontalLayout_8.addWidget(self.realtime_apply_button)
        self.verticalLayout_3.addLayout(self.horizontalLayout_8)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/icons/icons/Live_icon (6).ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.tabWidget.addTab(self.realtime_tab, icon1, "")
        self.offline_tab = QtWidgets.QWidget()
        self.offline_tab.setObjectName("offline_tab")
        self.verticalLayout_9 = QtWidgets.QVBoxLayout(self.offline_tab)
        self.verticalLayout_9.setObjectName("verticalLayout_9")
        self.toolBox_2 = QtWidgets.QToolBox(self.offline_tab)
        self.toolBox_2.setMinimumSize(QtCore.QSize(280, 0))
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(12)
        self.toolBox_2.setFont(font)
        self.toolBox_2.setStyleSheet("/* Style the QToolBox tab headers */\n"
"QToolBox::tab {\n"
"    color: #4d5966; /* Gunmetal Gray for text to maintain a modern look */\n"
"    border-radius: 10px; /* Slight rounding on tabs */\n"
"    padding: 5px 10px; /* Space inside the tabs */\n"
"    background-color: rgba(43, 48, 55, 0.7); /* Charcoal Black with transparency for the tab background */\n"
"    /* transition: background-color 0.2s ease-in-out; /* Smooth hover /* transition */\n"
"}\n"
"\n"
"/* Hover state for tabs */\n"
"QToolBox::tab:hover {\n"
"    background-color: rgba(0, 255, 204, 0.2); /* Neon Aqua with slight transparency for hover */\n"
"    color: #FFFFFF; /* White text for contrast */\n"
"}\n"
"\n"
"/* Style the active tab header */\n"
"QToolBox::tab:selected {\n"
"    font: bold 16px;\n"
"    color: #f1b531; /* Golden Yellow for active tab text */\n"
"    border: 2px solid #00ffcc; /* Neon Aqua for the active tab border */\n"
"    background-color: rgba(31, 42, 68, 0.8); /* Midnight Blue for active tab background */\n"
"    /* box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3); /* Subtle shadow effect for emphasis */\n"
"}\n"
"\n"
"/* Style the content inside the QToolBox */\n"
"QToolBox QWidget {\n"
"    border-radius: 8px;\n"
"    /* filter: blur(5px); /* Lighter blur effect */\n"
"}")
        self.toolBox_2.setFrameShape(QtWidgets.QFrame.Panel)
        self.toolBox_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.toolBox_2.setObjectName("toolBox_2")
        self.offline_setting_heading = QtWidgets.QWidget()
        self.offline_setting_heading.setGeometry(QtCore.QRect(0, 0, 336, 629))
        self.offline_setting_heading.setObjectName("offline_setting_heading")
        self.verticalLayout_10 = QtWidgets.QVBoxLayout(self.offline_setting_heading)
        self.verticalLayout_10.setObjectName("verticalLayout_10")
        spacerItem9 = QtWidgets.QSpacerItem(20, 10, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.verticalLayout_10.addItem(spacerItem9)
        self.horizontalLayout_21 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_21.setSpacing(0)
        self.horizontalLayout_21.setObjectName("horizontalLayout_21")
        self.open_dir_button = QtWidgets.QToolButton(self.offline_setting_heading)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(1)
        font.setBold(True)
        font.setWeight(75)
        self.open_dir_button.setFont(font)
        self.open_dir_button.setStyleSheet("/* Default QPushButton style */\n"
"QToolButton {\n"
"    color:  #15e7e0; /* Primary logo color */\n"
"    text-align: center; /* Center-align text */\n"
"    background: transparent; /* No background */\n"
"    border: none; /* No border */\n"
"    font-size: 16px; /* Default font size */\n"
"    font-weight: bold;\n"
"    padding: 5px 10px; /* Add spacing for better clickability */\n"
"}\n"
"\n"
"/* Hover effect for QPushButton */\n"
"QToolButton:hover {\n"
"    color: #f1b531; /* Highlight with logo\'s aqua color */\n"
"    font-weight: bold; /* Bold text on hover */\n"
"    /* font-size: 18px; /* Slightly larger font size */\n"
"    background-color: rgba(241, 181, 49, 0.1); /* Subtle hover background */\n"
"    border-radius: 10px; /* Rounded corners on hover */\n"
"}\n"
"\n"
"/* Pressed state for QPushButton */\n"
"QToolButton:pressed {\n"
"    color: #27b2fd; /* Brighter blue for pressed effect */\n"
"    font-size: 16px; /* Reset font size */\n"
"}")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/icons/icons/open_folder (1).ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.open_dir_button.setIcon(icon2)
        self.open_dir_button.setIconSize(QtCore.QSize(40, 40))
        self.open_dir_button.setPopupMode(QtWidgets.QToolButton.DelayedPopup)
        self.open_dir_button.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
        self.open_dir_button.setObjectName("open_dir_button")
        self.horizontalLayout_21.addWidget(self.open_dir_button, 0, QtCore.Qt.AlignLeft)
        self.upload_button = QtWidgets.QToolButton(self.offline_setting_heading)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(1)
        font.setBold(True)
        font.setWeight(75)
        self.upload_button.setFont(font)
        self.upload_button.setStyleSheet("/* Default QPushButton style */\n"
"QToolButton {\n"
"    color:  #15e7e0; /* Primary logo color */\n"
"    text-align: center; /* Center-align text */\n"
"    background: transparent; /* No background */\n"
"    border: none; /* No border */\n"
"    font-size: 16px; /* Default font size */\n"
"    font-weight: bold;\n"
"    padding: 5px 10px; /* Add spacing for better clickability */\n"
"}\n"
"\n"
"/* Hover effect for QPushButton */\n"
"QToolButton:hover {\n"
"    color: #f1b531; /* Highlight with logo\'s aqua color */\n"
"    font-weight: bold; /* Bold text on hover */\n"
"    /* font-size: 18px; /* Slightly larger font size */\n"
"    background-color: rgba(241, 181, 49, 0.1); /* Subtle hover background */\n"
"    border-radius: 10px; /* Rounded corners on hover */\n"
"}\n"
"\n"
"/* Pressed state for QPushButton */\n"
"QToolButton:pressed {\n"
"    color: #27b2fd; /* Brighter blue for pressed effect */\n"
"    font-size: 16px; /* Reset font size */\n"
"}")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(":/icons/icons/upload (1).ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.upload_button.setIcon(icon3)
        self.upload_button.setIconSize(QtCore.QSize(40, 40))
        self.upload_button.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
        self.upload_button.setObjectName("upload_button")
        self.horizontalLayout_21.addWidget(self.upload_button, 0, QtCore.Qt.AlignRight)
        self.verticalLayout_10.addLayout(self.horizontalLayout_21)
        spacerItem10 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.verticalLayout_10.addItem(spacerItem10)
        self.label_13 = QtWidgets.QLabel(self.offline_setting_heading)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(1)
        font.setBold(True)
        font.setWeight(75)
        self.label_13.setFont(font)
        self.label_13.setStyleSheet("QLabel {\n"
"    color: #15e7e0; /* Matching logo color */\n"
"    font-size: 18px;\n"
"    font-weight: bold;\n"
"    background: transparent;\n"
"    padding-right: 5px; /* Spacing between label and input field */\n"
"}")
        self.label_13.setObjectName("label_13")
        self.verticalLayout_10.addWidget(self.label_13, 0, QtCore.Qt.AlignHCenter)
        spacerItem11 = QtWidgets.QSpacerItem(0, 5, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.verticalLayout_10.addItem(spacerItem11)
        self.offline_modelselection = QtWidgets.QComboBox(self.offline_setting_heading)
        self.offline_modelselection.setMaximumSize(QtCore.QSize(318, 34))
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(1)
        font.setBold(True)
        font.setWeight(75)
        self.offline_modelselection.setFont(font)
        self.offline_modelselection.setStyleSheet("/* Base QComboBox Style */\n"
"QComboBox {\n"
"    color: #15e7e0; /* Text color from logo */\n"
"    font-size: 14px;\n"
"    font-weight: bold;\n"
"    background: transparent; /* No background */\n"
"    border: 2px solid #27b2fd; /* Subtle blue border */\n"
"    border-radius: 5px;\n"
"    padding: 5px 10px;\n"
"}\n"
"\n"
"/* Remove the default dropdown button background */\n"
"QComboBox::drop-down {\n"
"    border: none;\n"
"    background: transparent;\n"
"}\n"
"\n"
"/* Dropdown List */\n"
"QComboBox QAbstractItemView {\n"
"    background-color: rgba(31, 42, 68, 0.9); /* Midnight blue with transparency */\n"
"    border: 2px solid #27b2fd; /* Blue border */\n"
"    selection-background-color: #f1b531; /* Golden yellow highlight */\n"
"    selection-color: #ffffff; /* White text */\n"
"    border-radius: 5px;\n"
"    padding: 5px;\n"
"}\n"
"\n"
"/* Hover and Focus Effects */\n"
"QComboBox:hover, QComboBox:focus {\n"
"    border: 2px solid #f1b531; /* Change border color when active */\n"
"    color: #91ecfe; /* Slightly lighter text color */\n"
"}")
        self.offline_modelselection.setObjectName("offline_modelselection")
        self.verticalLayout_10.addWidget(self.offline_modelselection)
        spacerItem12 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.verticalLayout_10.addItem(spacerItem12)
        self.label_23 = QtWidgets.QLabel(self.offline_setting_heading)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(1)
        font.setBold(True)
        font.setWeight(75)
        self.label_23.setFont(font)
        self.label_23.setStyleSheet("QLabel {\n"
"    color: #15e7e0; /* Matching logo color */\n"
"    font-size: 18px;\n"
"    font-weight: bold;\n"
"    background: transparent;\n"
"    padding-right: 5px; /* Spacing between label and input field */\n"
"}")
        self.label_23.setObjectName("label_23")
        self.verticalLayout_10.addWidget(self.label_23, 0, QtCore.Qt.AlignHCenter)
        spacerItem13 = QtWidgets.QSpacerItem(20, 5, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.verticalLayout_10.addItem(spacerItem13)
        self.horizontalLayout_19 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_19.setObjectName("horizontalLayout_19")
        self.label_19 = QtWidgets.QLabel(self.offline_setting_heading)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(1)
        font.setBold(False)
        font.setWeight(50)
        self.label_19.setFont(font)
        self.label_19.setStyleSheet("QLabel {\n"
"    color: #15e7e0; /* Matching logo color */\n"
"    font-size: 14px;\n"
"    font-weight: normal;\n"
"    background: transparent;\n"
"    padding-right: 5px; /* Spacing between label and input field */\n"
"}")
        self.label_19.setObjectName("label_19")
        self.horizontalLayout_19.addWidget(self.label_19, 0, QtCore.Qt.AlignRight)
        spacerItem14 = QtWidgets.QSpacerItem(2, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_19.addItem(spacerItem14)
        self.offline_conf_spinbox = QtWidgets.QSpinBox(self.offline_setting_heading)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(1)
        self.offline_conf_spinbox.setFont(font)
        self.offline_conf_spinbox.setStyleSheet("/* Style for the QSpinBox container */\n"
"QSpinBox {\n"
"    color: #f1f1f1;  /* Light text color */\n"
"    background-color: transparent;  /* No background */\n"
"    border: none;  /* No border */\n"
"    font-size: 16px;  /* Set font size */\n"
"    padding: 5px;  /* Padding inside the spin box */\n"
"}\n"
"\n"
"/* Style for the up and down buttons in the QSpinBox */\n"
"QSpinBox::up-button, QSpinBox::down-button {\n"
"    background-color: rgba(43, 48, 55, 0.7); /* Charcoal Black with transparency */\n"
"    border: none;  /* No border */\n"
"    width: 20px;  /* Set width for buttons */\n"
"    height: 20px;  /* Set height for buttons */\n"
"    color: #f1f1f1;  /* Light text color for button */\n"
"}\n"
"\n"
"/* Hover effect for the up and down buttons */\n"
"QSpinBox::up-button:hover, QSpinBox::down-button:hover {\n"
"    background-color: rgba(0, 255, 204, 0.2);  /* Neon Aqua with slight transparency */\n"
"    color: #ffffff;  /* White text for contrast */\n"
"}\n"
"\n"
"/* Style when the spinbox is focused (i.e., clicked or active) */\n"
"QSpinBox:focus {\n"
"    border: 2px solid #00ffcc;  /* Neon Aqua border */\n"
"    background-color: rgba(31, 42, 68, 0.8); /* Slightly darker Midnight Blue background */\n"
"    color: #f1b531;  /* Golden Yellow text */\n"
"}")
        self.offline_conf_spinbox.setObjectName("offline_conf_spinbox")
        self.horizontalLayout_19.addWidget(self.offline_conf_spinbox)
        self.offline_conf_horizontalslider = QtWidgets.QSlider(self.offline_setting_heading)
        self.offline_conf_horizontalslider.setStyleSheet("/* Base style for QSlider */\n"
"QSlider {\n"
"    background: transparent; /* No background */\n"
"    border: none;\n"
"    height: 8px; /* Slider height */\n"
"}\n"
"\n"
"/* Handle of the slider */\n"
"QSlider::handle {\n"
"    background: #42ddbc; /* Color matching the logo */\n"
"    border: 2px solid #27b2fd; /* Blue border */\n"
"    width: 18px; /* Handle size */\n"
"    height: 18px;\n"
"    border-radius: 9px; /* Rounded handle */\n"
"    margin: -5px 0; /* Adjust handle positioning */\n"
"}\n"
"\n"
"/* Hover effect for the slider handle */\n"
"QSlider::handle:hover {\n"
"    background: #f1b531; /* Golden Yellow on hover */\n"
"    border: 2px solid #00ffcc; /* Neon Aqua border */\n"
"}\n"
"\n"
"/* Slider groove (the background of the slider) */\n"
"QSlider::groove:horizontal {\n"
"    border-radius: 4px;\n"
"    background: rgba(43, 48, 55, 0.7); /* Charcoal Black with transparency */\n"
"    height: 8px;\n"
"}\n"
"\n"
"/* Style the slider groove when the slider is active */\n"
"QSlider::groove:horizontal:active {\n"
"    background: rgba(31, 42, 68, 0.8); /* Darker shade for active groove */\n"
"}\n"
"\n"
"/* Style for the tick marks on the slider (if enabled) */\n"
"QSlider::tick {\n"
"    background: #27b2fd; /* Blue color for ticks */\n"
"}\n"
"\n"
"/* Style the ticks on hover */\n"
"QSlider::tick:hover {\n"
"    background: #f1b531; /* Golden Yellow for tick hover */\n"
"}")
        self.offline_conf_horizontalslider.setOrientation(QtCore.Qt.Horizontal)
        self.offline_conf_horizontalslider.setObjectName("offline_conf_horizontalslider")
        self.horizontalLayout_19.addWidget(self.offline_conf_horizontalslider)
        self.verticalLayout_10.addLayout(self.horizontalLayout_19)
        self.horizontalLayout_20 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_20.setObjectName("horizontalLayout_20")
        self.label_20 = QtWidgets.QLabel(self.offline_setting_heading)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(1)
        font.setBold(False)
        font.setWeight(50)
        self.label_20.setFont(font)
        self.label_20.setStyleSheet("QLabel {\n"
"    color: #15e7e0; /* Matching logo color */\n"
"    font-size: 14px;\n"
"    font-weight: normal;\n"
"    background: transparent;\n"
"    padding-right: 5px; /* Spacing between label and input field */\n"
"}")
        self.label_20.setObjectName("label_20")
        self.horizontalLayout_20.addWidget(self.label_20, 0, QtCore.Qt.AlignRight)
        spacerItem15 = QtWidgets.QSpacerItem(11, 5, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_20.addItem(spacerItem15)
        self.offline_iou_spinbox = QtWidgets.QSpinBox(self.offline_setting_heading)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(1)
        self.offline_iou_spinbox.setFont(font)
        self.offline_iou_spinbox.setStyleSheet("/* Style for the QSpinBox container */\n"
"QSpinBox {\n"
"    color: #f1f1f1;  /* Light text color */\n"
"    background-color: transparent;  /* No background */\n"
"    border: none;  /* No border */\n"
"    font-size: 16px;  /* Set font size */\n"
"    padding: 5px;  /* Padding inside the spin box */\n"
"}\n"
"\n"
"/* Style for the up and down buttons in the QSpinBox */\n"
"QSpinBox::up-button, QSpinBox::down-button {\n"
"    background-color: rgba(43, 48, 55, 0.7); /* Charcoal Black with transparency */\n"
"    border: none;  /* No border */\n"
"    width: 20px;  /* Set width for buttons */\n"
"    height: 20px;  /* Set height for buttons */\n"
"    color: #f1f1f1;  /* Light text color for button */\n"
"}\n"
"\n"
"/* Hover effect for the up and down buttons */\n"
"QSpinBox::up-button:hover, QSpinBox::down-button:hover {\n"
"    background-color: rgba(0, 255, 204, 0.2);  /* Neon Aqua with slight transparency */\n"
"    color: #ffffff;  /* White text for contrast */\n"
"}\n"
"\n"
"/* Style when the spinbox is focused (i.e., clicked or active) */\n"
"QSpinBox:focus {\n"
"    border: 2px solid #00ffcc;  /* Neon Aqua border */\n"
"    background-color: rgba(31, 42, 68, 0.8); /* Slightly darker Midnight Blue background */\n"
"    color: #f1b531;  /* Golden Yellow text */\n"
"}")
        self.offline_iou_spinbox.setObjectName("offline_iou_spinbox")
        self.horizontalLayout_20.addWidget(self.offline_iou_spinbox)
        self.offline_iou_horizontalslider = QtWidgets.QSlider(self.offline_setting_heading)
        self.offline_iou_horizontalslider.setStyleSheet("/* Base style for QSlider */\n"
"QSlider {\n"
"    background: transparent; /* No background */\n"
"    border: none;\n"
"    height: 8px; /* Slider height */\n"
"}\n"
"\n"
"/* Handle of the slider */\n"
"QSlider::handle {\n"
"    background: #42ddbc; /* Color matching the logo */\n"
"    border: 2px solid #27b2fd; /* Blue border */\n"
"    width: 18px; /* Handle size */\n"
"    height: 18px;\n"
"    border-radius: 9px; /* Rounded handle */\n"
"    margin: -5px 0; /* Adjust handle positioning */\n"
"}\n"
"\n"
"/* Hover effect for the slider handle */\n"
"QSlider::handle:hover {\n"
"    background: #f1b531; /* Golden Yellow on hover */\n"
"    border: 2px solid #00ffcc; /* Neon Aqua border */\n"
"}\n"
"\n"
"/* Slider groove (the background of the slider) */\n"
"QSlider::groove:horizontal {\n"
"    border-radius: 4px;\n"
"    background: rgba(43, 48, 55, 0.7); /* Charcoal Black with transparency */\n"
"    height: 8px;\n"
"}\n"
"\n"
"/* Style the slider groove when the slider is active */\n"
"QSlider::groove:horizontal:active {\n"
"    background: rgba(31, 42, 68, 0.8); /* Darker shade for active groove */\n"
"}\n"
"\n"
"/* Style for the tick marks on the slider (if enabled) */\n"
"QSlider::tick {\n"
"    background: #27b2fd; /* Blue color for ticks */\n"
"}\n"
"\n"
"/* Style the ticks on hover */\n"
"QSlider::tick:hover {\n"
"    background: #f1b531; /* Golden Yellow for tick hover */\n"
"}")
        self.offline_iou_horizontalslider.setOrientation(QtCore.Qt.Horizontal)
        self.offline_iou_horizontalslider.setObjectName("offline_iou_horizontalslider")
        self.horizontalLayout_20.addWidget(self.offline_iou_horizontalslider)
        self.verticalLayout_10.addLayout(self.horizontalLayout_20)
        spacerItem16 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_10.addItem(spacerItem16)
        self.toolBox_2.addItem(self.offline_setting_heading, "")
        self.filter_header_2 = QtWidgets.QWidget()
        self.filter_header_2.setGeometry(QtCore.QRect(0, 0, 336, 629))
        self.filter_header_2.setObjectName("filter_header_2")
        self.verticalLayout_19 = QtWidgets.QVBoxLayout(self.filter_header_2)
        self.verticalLayout_19.setObjectName("verticalLayout_19")
        self.offline_ClassNames_radiobutton = QtWidgets.QRadioButton(self.filter_header_2)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(1)
        self.offline_ClassNames_radiobutton.setFont(font)
        self.offline_ClassNames_radiobutton.setStyleSheet("/* Style for QRadioButton (checkbox style) */\n"
"QRadioButton {\n"
"    color: #15e7e0;  /* Light text color */\n"
"    font-size: 16px;  /* Set font size */\n"
"    padding: 5px 20px;  /* Add padding */\n"
"    border: none;  /* No border */\n"
"    background: transparent;  /* Transparent background */\n"
"    spacing: 10px;  /* Space between checkbox and label */\n"
"    margin-left: 10px;  /* Ensure there\'s space for the text */\n"
"}\n"
"\n"
"/* Style for the checkbox indicator (unchecked) */\n"
"QRadioButton::indicator {\n"
"    width: 18px;  /* Set the size of the checkbox */\n"
"    height: 18px;  /* Set the size of the checkbox */\n"
"    border: 2px solid #27b2fd;  /* Subtle blue border */\n"
"    border-radius: 10px;  /* Slightly rounded corners for checkbox */\n"
"    background-color: transparent;  /* Transparent background */\n"
"}\n"
"\n"
"/* Style for the checkbox indicator when checked */\n"
"QRadioButton::indicator:checked {\n"
"    background-color: #f1b531;  /* Golden yellow background when checked */\n"
"    border: 2px solid #f1b531;  /* Golden yellow border */\n"
"    image: url(:/path/to/checkmark.png);  /* Optional: Add a checkmark image */\n"
"}\n"
"\n"
"/* Hover effect for QRadioButton */\n"
"QRadioButton:hover {\n"
"    color: #f1b531;  /* Change text color to golden yellow on hover */\n"
"}\n"
"\n"
"/* Focused state (when the checkbox is focused) */\n"
"QRadioButton:focus {\n"
"    outline: none;  /* Remove outline when focused */\n"
"}\n"
"\n"
"/* Disabled state for QRadioButton */\n"
"QRadioButton:disabled {\n"
"    color: #4d5966;  /* Dim the text color to indicate disabled state */\n"
"}\n"
"")
        self.offline_ClassNames_radiobutton.setObjectName("offline_ClassNames_radiobutton")
        self.verticalLayout_19.addWidget(self.offline_ClassNames_radiobutton)
        self.toolBox_2.addItem(self.filter_header_2, "")
        self.verticalLayout_9.addWidget(self.toolBox_2)
        spacerItem17 = QtWidgets.QSpacerItem(20, 5, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.verticalLayout_9.addItem(spacerItem17)
        self.horizontalLayout_12 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_12.setObjectName("horizontalLayout_12")
        self.offline_reset_button = QtWidgets.QPushButton(self.offline_tab)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.offline_reset_button.setFont(font)
        self.offline_reset_button.setStyleSheet("/* Base style for QPushButton */\n"
"QPushButton {\n"
"    background-color: #2b3037; /* Charcoal Black background for a modern, robust feel */\n"
"    color: #f1b531; /* White text for clarity */\n"
"    border: 2px solid #f1b531; /* Golden Yellow border for a vibrant contrast */\n"
"    border-radius: 10px; /* Smooth rounded corners */\n"
"    padding: 12px 24px; /* Adjust padding for size */\n"
"    /* font: bold 14px \"Segoe UI\", Arial, sans-serif; /* Clean modern font */\n"
"    letter-spacing: 1px; /* Slight letter spacing for elegance */\n"
"    text-transform: uppercase; /* Capitalized text for emphasis */\n"
"    /* transition: all 0.3s ease; /* Smooth animations */\n"
"}\n"
"\n"
"/* Hover effect */\n"
"QPushButton:hover {\n"
"    background-color: #f1b531; /* Golden Yellow for the hover background */\n"
"    color: #1f2a44; /* Midnight Blue text for contrast */\n"
"    border-color: #e6c31b; /* Softer Golden Yellow border on hover */\n"
"    /* transform: translateY(-2px); /* Lift the button slightly */\n"
"    /* box-shadow: 0px 8px 15px rgba(241, 181, 49, 0.3); /* Soft golden glow effect */\n"
"}\n"
"\n"
"/* Pressed (clicked) effect */\n"
"QPushButton:pressed {\n"
"    background-color: #1f2a44; /* Midnight Blue background on press */\n"
"    color: #ffffff; /* White text for contrast */\n"
"    border-color: #4d5966; /* Gunmetal Gray border on press */\n"
"    /* transform: translateY(2px); /* Slight press effect */\n"
"    /* box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2); /* Subtle shadow */\n"
"}\n"
"\n"
"/* Disabled state */\n"
"QPushButton:disabled {\n"
"    background-color: #4d5966; /* Gunmetal Gray for disabled state */\n"
"    color: #ffffff; /* White text */\n"
"    border-color: #4d5966; /* Matching border */\n"
"    /* box-shadow: none; /* No shadow for disabled */\n"
"}")
        self.offline_reset_button.setObjectName("offline_reset_button")
        self.horizontalLayout_12.addWidget(self.offline_reset_button)
        self.offline_apply_button = QtWidgets.QPushButton(self.offline_tab)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.offline_apply_button.setFont(font)
        self.offline_apply_button.setStyleSheet("/* Base style for QPushButton */\n"
"QPushButton {\n"
"    background-color: #2b3037; /* Charcoal Black background for a modern, robust feel */\n"
"    color: #00ffcc; /* Neon Aqua text for a vibrant, futuristic look */\n"
"    border: 2px solid #00ffcc; /* Neon Aqua border to maintain consistency */\n"
"    border-radius: 10px; /* Smooth rounded corners */\n"
"    padding: 12px 24px; /* Adjust padding for size */\n"
"    /* font: bold 14px \"Segoe UI\", Arial, sans-serif; /* Clean modern font */\n"
"    letter-spacing: 1px; /* Slight letter spacing for elegance */\n"
"    text-transform: uppercase; /* Capitalized text for emphasis */\n"
"    /* transition: all 0.3s ease; /* Smooth animations */\n"
"}\n"
"\n"
"/* Hover effect */\n"
"QPushButton:hover {\n"
"    background-color: #00ffcc; /* Neon Aqua for the hover background */\n"
"    color: #1f2a44; /* Midnight Blue for contrast text */\n"
"    border-color: #00ffcc; /* Keep the border the same on hover */\n"
"    /* transform: translateY(-2px); /* Lift the button slightly */\n"
"    /* box-shadow: 0px 8px 15px rgba(0, 255, 204, 0.3); /* Soft glow effect */\n"
"}\n"
"\n"
"/* Pressed (clicked) effect */\n"
"QPushButton:pressed {\n"
"    background-color: #1f2a44; /* Midnight Blue background on press */\n"
"    color: #ffffff; /* White text for contrast */\n"
"    border-color: #4d5966; /* Gunmetal Gray border on press */\n"
"    /* transform: translateY(2px); /* Slight press effect */\n"
"    /* box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2); /* Subtle shadow */\n"
"}\n"
"\n"
"/* Disabled state */\n"
"QPushButton:disabled {\n"
"    background-color: #4d5966; /* Gunmetal Gray for disabled state */\n"
"    color: #ffffff; /* White text */\n"
"    border-color: #4d5966; /* Matching border */\n"
"    /* box-shadow: none; /* No shadow for disabled */\n"
"}")
        self.offline_apply_button.setObjectName("offline_apply_button")
        self.horizontalLayout_12.addWidget(self.offline_apply_button)
        self.verticalLayout_9.addLayout(self.horizontalLayout_12)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(":/icons/icons/unlive_icon (5).ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.tabWidget.addTab(self.offline_tab, icon4, "")
        self.verticalLayout_2.addWidget(self.tabWidget)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setSpacing(0)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.verticalLayout_2.addLayout(self.horizontalLayout_4)
        self.horizontalLayout.addWidget(self.menu_frame)
        self.ui_stackedwidget = QtWidgets.QStackedWidget(self.centralwidget)
        self.ui_stackedwidget.setMinimumSize(QtCore.QSize(350, 0))
        self.ui_stackedwidget.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.ui_stackedwidget.setStyleSheet("QStackedWidget {\n"
"    background-color: rgba(43, 48, 55, 0.6); /* Charcoal Black with transparency for a sleek, modern look */\n"
"    /* filter: blur(5px); /* Reduced blur for better clarity */\n"
"    height: 100%;\n"
"    /* border-radius: 12px; /* Rounded corners for a modern look */\n"
"    /* transition: background-color 0.3s ease, /* filter 0.3s ease; /* Smooth transitions */\n"
"}")
        self.ui_stackedwidget.setObjectName("ui_stackedwidget")
        self.page = QtWidgets.QWidget()
        self.page.setObjectName("page")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.page)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.toggle_menu_button_realtime = QtWidgets.QToolButton(self.page)
        self.toggle_menu_button_realtime.setStyleSheet("/* Base style for the burger menu button */\n"
"QToolButton {\n"
"    background-color: transparent; /* Transparent background for a clean look */\n"
"    border: none; /* Remove any border */\n"
"    color: #f1b531; /* Golden Yellow for the icon */\n"
"    font-size: 30px; /* Larger font size for prominence */\n"
"    width: 40px; /* Adjust width for the button */\n"
"    height: 40px; /* Adjust height for the button */\n"
"    padding: 5px; /* Adjust padding */\n"
"    /* cursor: pointer; /* Cursor pointer to indicate it\'s clickable */\n"
"    /* transition: all 0.3s ease-in-out; /* Smooth /* transition for hover and active states */\n"
"}\n"
"\n"
"/* Hover effect for burger menu button */\n"
"QToolButton:hover {\n"
"    background-color: #4d5966; /* Gunmetal Gray background on hover */\n"
"    color: #ffffff; /* White icon for contrast */\n"
"    border-radius: 20px; /* Rounded button on hover */\n"
"    /* box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.3); /* Subtle shadow for depth */\n"
"}\n"
"\n"
"/* Active (pressed) effect for burger menu button */\n"
"QToolButton:pressed {\n"
"    background-color: #1f2a44; /* Midnight Blue background when pressed */\n"
"    color: #f1b531; /* Golden Yellow icon for contrast */\n"
"    /* transform: scale(0.95); /* Slight shrink for the pressed effect */\n"
"    /* box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.2); /* Subtle shadow for depth */\n"
"}\n"
"")
        self.toggle_menu_button_realtime.setText("")
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(":/icons/icons/MenuButton (2).ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.toggle_menu_button_realtime.setIcon(icon5)
        self.toggle_menu_button_realtime.setIconSize(QtCore.QSize(50, 50))
        self.toggle_menu_button_realtime.setCheckable(False)
        self.toggle_menu_button_realtime.setPopupMode(QtWidgets.QToolButton.InstantPopup)
        self.toggle_menu_button_realtime.setToolButtonStyle(QtCore.Qt.ToolButtonIconOnly)
        self.toggle_menu_button_realtime.setAutoRaise(False)
        self.toggle_menu_button_realtime.setArrowType(QtCore.Qt.NoArrow)
        self.toggle_menu_button_realtime.setObjectName("toggle_menu_button_realtime")
        self.horizontalLayout_3.addWidget(self.toggle_menu_button_realtime)
        self.frame_2 = QtWidgets.QFrame(self.page)
        self.frame_2.setStyleSheet("QFrame {\n"
"    background-color: transparent; /* Charcoal Black with transparency for a sleek, modern look */\n"
"    /* filter: blur(5px); /* Reduced blur for better clarity */\n"
"    height: 100%;\n"
"    border-radius: 12px; /* Rounded corners for a modern look */\n"
"    /* transition: background-color 0.3s ease, /* filter 0.3s ease; /* Smooth transitions */\n"
"    margin: 100vh 0;\n"
"}")
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.verticalLayout_11 = QtWidgets.QVBoxLayout(self.frame_2)
        self.verticalLayout_11.setObjectName("verticalLayout_11")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout()
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.realtime_stackedwidget = QtWidgets.QStackedWidget(self.frame_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.realtime_stackedwidget.sizePolicy().hasHeightForWidth())
        self.realtime_stackedwidget.setSizePolicy(sizePolicy)
        self.realtime_stackedwidget.setStyleSheet("QStackedWidget {\n"
"    background-color: transparent; /* Charcoal Black with transparency for a sleek, modern look */\n"
"    /* filter: blur(5px); /* Reduced blur for better clarity */\n"
"    height: 100%;\n"
"    border-radius: 12px; /* Rounded corners for a modern look */\n"
"    /* transition: background-color 0.3s ease, /* filter 0.3s ease; /* Smooth transitions */\n"
"}")
        self.realtime_stackedwidget.setObjectName("realtime_stackedwidget")
        self.page_3 = QtWidgets.QWidget()
        self.page_3.setObjectName("page_3")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.page_3)
        self.verticalLayout.setObjectName("verticalLayout")
        self.Cam1_label = QtWidgets.QLabel(self.page_3)
        self.Cam1_label.setMaximumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(22)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.Cam1_label.setFont(font)
        self.Cam1_label.setStyleSheet("QLabel {\n"
"    background-color: transparent; /* Transparent background */\n"
"    color: #00ffcc; /* Neon Aqua for the title text */\n"
"    padding-left: 5px; /* Padding for alignment */\n"
"    font: bold; /* Bold text with larger size for emphasis */\n"
"}")
        self.Cam1_label.setObjectName("Cam1_label")
        self.verticalLayout.addWidget(self.Cam1_label)
        spacerItem18 = QtWidgets.QSpacerItem(20, 5, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.verticalLayout.addItem(spacerItem18)
        self.Cam1_feed = QtWidgets.QLabel(self.page_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Cam1_feed.sizePolicy().hasHeightForWidth())
        self.Cam1_feed.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        font.setStrikeOut(False)
        self.Cam1_feed.setFont(font)
        self.Cam1_feed.setStyleSheet("QLabel {\n"
"    background-color: #2b3037; /* Charcoal Black background for a sleek, modern look */\n"
"    color: #ffffff; /* White text for visibility */\n"
"    border-radius: 8px; /* Rounded corners for a modern appearance */\n"
"    border: 3px solid #4d5966;\n"
"    /*padding: 10px; /* Padding for content spacing */\n"
"}")
        self.Cam1_feed.setText("")
        self.Cam1_feed.setTextFormat(QtCore.Qt.AutoText)
        self.Cam1_feed.setPixmap(QtGui.QPixmap(":/icons/noVid_icn.png"))
        self.Cam1_feed.setScaledContents(False)
        self.Cam1_feed.setAlignment(QtCore.Qt.AlignCenter)
        self.Cam1_feed.setWordWrap(False)
        self.Cam1_feed.setObjectName("Cam1_feed")
        self.verticalLayout.addWidget(self.Cam1_feed)
        self.realtime_stackedwidget.addWidget(self.page_3)
        self.page_4 = QtWidgets.QWidget()
        self.page_4.setObjectName("page_4")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.page_4)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.Cam2_label = QtWidgets.QLabel(self.page_4)
        self.Cam2_label.setMaximumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(22)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.Cam2_label.setFont(font)
        self.Cam2_label.setStyleSheet("QLabel {\n"
"    background-color: transparent; /* Transparent background */\n"
"    color: #00ffcc; /* Neon Aqua for the title text */\n"
"    padding-left: 5px; /* Padding for alignment */\n"
"    font: bold; /* Bold text with larger size for emphasis */\n"
"}")
        self.Cam2_label.setObjectName("Cam2_label")
        self.verticalLayout_6.addWidget(self.Cam2_label)
        spacerItem19 = QtWidgets.QSpacerItem(20, 5, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.verticalLayout_6.addItem(spacerItem19)
        self.Cam2_feed = QtWidgets.QLabel(self.page_4)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Cam2_feed.sizePolicy().hasHeightForWidth())
        self.Cam2_feed.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        font.setStrikeOut(False)
        self.Cam2_feed.setFont(font)
        self.Cam2_feed.setStyleSheet("QLabel {\n"
"    background-color: #2b3037; /* Charcoal Black background for a sleek, modern look */\n"
"    color: #ffffff; /* White text for visibility */\n"
"    border-radius: 8px; /* Rounded corners for a modern appearance */\n"
"    border: 3px solid #4d5966;\n"
"    /*padding: 10px; /* Padding for content spacing */\n"
"}")
        self.Cam2_feed.setText("")
        self.Cam2_feed.setTextFormat(QtCore.Qt.AutoText)
        self.Cam2_feed.setPixmap(QtGui.QPixmap(":/icons/noVid_icn.png"))
        self.Cam2_feed.setScaledContents(False)
        self.Cam2_feed.setAlignment(QtCore.Qt.AlignCenter)
        self.Cam2_feed.setWordWrap(True)
        self.Cam2_feed.setObjectName("Cam2_feed")
        self.verticalLayout_6.addWidget(self.Cam2_feed)
        self.realtime_stackedwidget.addWidget(self.page_4)
        self.verticalLayout_7.addWidget(self.realtime_stackedwidget)
        self.verticalLayout_11.addLayout(self.verticalLayout_7)
        spacerItem20 = QtWidgets.QSpacerItem(20, 10, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.verticalLayout_11.addItem(spacerItem20)
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_6.setSpacing(0)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.prev_button = QtWidgets.QPushButton(self.frame_2)
        self.prev_button.setStyleSheet("/* Base style for the Next button */\n"
"QPushButton {\n"
"    background-color: transparent; /* Blue background to match the logo */\n"
"    color: #ffffff; /* White text for contrast */\n"
"    /*border: 2px solid #27b2fd; /* Matching blue border */\n"
"    border-radius: 24px; /* Rounded corners for a smooth look */\n"
"    padding: 12px 24px; /* Adjust padding for size */\n"
"    font: bold 16px \"Segoe UI\", Arial, sans-serif; /* Modern, bold font */\n"
"    letter-spacing: 1px; /* Slight letter spacing for elegance */\n"
"    text-transform: uppercase; /* Capitalized text for emphasis */\n"
"    /* transition: all 0.3s ease; /* Smooth /* transition for hover and active states */\n"
"}\n"
"\n"
"/* Hover effect for Next button */\n"
"QPushButton:hover {\n"
"    background-color: #00ffcc; /* Neon Aqua for hover */\n"
"    color: #ffffff; /* White text for contrast */\n"
"    border-color: #91ecfe; /* Softer border on hover */\n"
"    /* transform: translateY(-2px); /* Lift the button slightly */\n"
"    /* box-shadow: 0px 6px 12px rgba(0, 0, 0, 0.1); /* Subtle shadow for depth */\n"
"}\n"
"\n"
"/* Active (pressed) effect for Next button */\n"
"QPushButton:pressed {\n"
"    background-color: #1f2a44; /* Midnight Blue when pressed */\n"
"    color: #ffffff; /* White text */\n"
"    border-color: #42ddbc; /* Lighter teal border */\n"
"    /* transform: translateY(2px); /* Slight press effect */\n"
"    /* box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2); /* Subtle shadow for depth */\n"
"}\n"
"\n"
"/* Disabled state for Next button */\n"
"QPushButton:disabled {\n"
"    background-color: #b0b0b0; /* Light gray for disabled state */\n"
"    color: #ffffff; /* White text */\n"
"    border-color: #a0a0a0; /* Softer border */\n"
"    /* box-shadow: none; /* No shadow for disabled state */\n"
"}")
        self.prev_button.setText("")
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap(":/icons/icons/PrevButton (5).ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.prev_button.setIcon(icon6)
        self.prev_button.setIconSize(QtCore.QSize(25, 25))
        self.prev_button.setObjectName("prev_button")
        self.horizontalLayout_6.addWidget(self.prev_button, 0, QtCore.Qt.AlignLeft)
        self.realtime_start_button = QtWidgets.QPushButton(self.frame_2)
        self.realtime_start_button.setMaximumSize(QtCore.QSize(150, 50))
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.realtime_start_button.setFont(font)
        self.realtime_start_button.setStyleSheet("/* Base style for QPushButton */\n"
"QPushButton {\n"
"    background-color:#00ffcc ; /* Charcoal Black background for a modern, robust feel */\n"
"    color: #2b3037; /* Neon Aqua text for a vibrant, futuristic look */\n"
"    border: 2px solid #2b3037; /* Neon Aqua border to maintain consistency */\n"
"    border-radius: 10px; /* Smooth rounded corners */\n"
"    padding: 12px 24px; /* Adjust padding for size */\n"
"    /* font: bold 14px \"Cascadia Code\", Arial, sans-serif; /* Clean modern font */\n"
"    letter-spacing: 1px; /* Slight letter spacing for elegance */\n"
"    text-transform: uppercase; /* Capitalized text for emphasis */\n"
"    /* transition: all 0.3s ease; /* Smooth animations */\n"
"\n"
"}\n"
"\n"
"/* Hover effect */\n"
"QPushButton:hover {\n"
"    background-color: #1f2a44; /* Neon Aqua for the hover background */\n"
"    color: #00ffcc; /* Midnight Blue for contrast text */\n"
"    border-color: #00ffcc; /* Keep the border the same on hover */\n"
"    /* transform: translateY(-2px); /* Lift the button slightly */\n"
"    /* box-shadow: 0px 8px 15px rgba(0, 255, 204, 0.3); /* Soft glow effect */\n"
"}\n"
"\n"
"/* Pressed (clicked) effect */\n"
"QPushButton:pressed {\n"
"    background-color: #1f2a44; /* Midnight Blue background on press */\n"
"    color: #ffffff; /* White text for contrast */\n"
"    border-color: #4d5966; /* Gunmetal Gray border on press */\n"
"    /* transform: translateY(2px); /* Slight press effect */\n"
"    /* box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2); /* Subtle shadow */\n"
"}\n"
"\n"
"/* Disabled state */\n"
"QPushButton:disabled {\n"
"    background-color:#00ffcc ; /* Charcoal Black background for a modern, robust feel */\n"
"    color: #2b3037; /* Neon Aqua text for a vibrant, futuristic look */\n"
"    border: 2px solid #2b3037; /* Neon Aqua border to maintain consistency */\n"
"    border-radius: 10px; /* Smooth rounded corners */\n"
"    padding: 12px 24px; /* Adjust padding for size */\n"
"    /* font: bold 14px \"Cascadia Code\", Arial, sans-serif; /* Clean modern font */\n"
"    letter-spacing: 1px; /* Slight letter spacing for elegance */\n"
"    text-transform: uppercase; /* Capitalized text for emphasis */\n"
"    /* transition: all 0.3s ease; /* Smooth animations */\n"
"}")
        self.realtime_start_button.setObjectName("realtime_start_button")
        self.horizontalLayout_6.addWidget(self.realtime_start_button)
        spacerItem21 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_6.addItem(spacerItem21)
        self.realtime_stop_button = QtWidgets.QPushButton(self.frame_2)
        self.realtime_stop_button.setMaximumSize(QtCore.QSize(150, 100))
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.realtime_stop_button.setFont(font)
        self.realtime_stop_button.setStyleSheet("/* Base style for QPushButton */\n"
"QPushButton {\n"
"    background-color: #f1b531; /* Charcoal Black background for a modern, robust feel */\n"
"    color: #2b3037; /* White text for clarity */\n"
"    border: 2px solid #2b3037; /* Golden Yellow border for a vibrant contrast */\n"
"    border-radius: 10px; /* Smooth rounded corners */\n"
"    padding: 12px 24px; /* Adjust padding for size */\n"
"    /* font: bold 14px \"Segoe UI\", Arial, sans-serif; /* Clean modern font */\n"
"    letter-spacing: 1px; /* Slight letter spacing for elegance */\n"
"    text-transform: uppercase; /* Capitalized text for emphasis */\n"
"    /* transition: all 0.3s ease; /* Smooth animations */\n"
"}\n"
"\n"
"/* Hover effect */\n"
"QPushButton:hover {\n"
"    background-color:#1f2a44; /* Golden Yellow for the hover background */\n"
"    color:  #f1b531; /* Midnight Blue text for contrast */\n"
"    border-color:  #f1b531; /* Softer Golden Yellow border on hover */\n"
"    /* transform: translateY(-2px); /* Lift the button slightly */\n"
"    /* box-shadow: 0px 8px 15px rgba(241, 181, 49, 0.3); /* Soft golden glow effect */\n"
"}\n"
"\n"
"/* Pressed (clicked) effect */\n"
"QPushButton:pressed {\n"
"    background-color: #1f2a44; /* Midnight Blue background on press */\n"
"    color: #ffffff; /* White text for contrast */\n"
"    border-color: #4d5966; /* Gunmetal Gray border on press */\n"
"    /* transform: translateY(2px); /* Slight press effect */\n"
"    /* box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2); /* Subtle shadow */\n"
"}\n"
"\n"
"/* Disabled state */\n"
"QPushButton:disabled {\n"
"    background-color: #f1b531; /* Charcoal Black background for a modern, robust feel */\n"
"    color: #2b3037; /* White text for clarity */\n"
"    border: 2px solid #2b3037; /* Golden Yellow border for a vibrant contrast */\n"
"    border-radius: 10px; /* Smooth rounded corners */\n"
"    padding: 12px 24px; /* Adjust padding for size */\n"
"    /* font: bold 14px \"Segoe UI\", Arial, sans-serif; /* Clean modern font */\n"
"    letter-spacing: 1px; /* Slight letter spacing for elegance */\n"
"    text-transform: uppercase; /* Capitalized text for emphasis */\n"
"    /* transition: all 0.3s ease; /* Smooth animations */\n"
"}")
        self.realtime_stop_button.setObjectName("realtime_stop_button")
        self.horizontalLayout_6.addWidget(self.realtime_stop_button)
        self.next_button = QtWidgets.QPushButton(self.frame_2)
        self.next_button.setStyleSheet("/* Base style for the Next button */\n"
"QPushButton {\n"
"    background-color: transparent; /* Blue background to match the logo */\n"
"    color: #ffffff; /* White text for contrast */\n"
"    /*border: 2px solid #27b2fd; /* Matching blue border */\n"
"    border-radius: 24px; /* Rounded corners for a smooth look */\n"
"    padding: 12px 24px; /* Adjust padding for size */\n"
"    font: bold 16px \"Segoe UI\", Arial, sans-serif; /* Modern, bold font */\n"
"    letter-spacing: 1px; /* Slight letter spacing for elegance */\n"
"    text-transform: uppercase; /* Capitalized text for emphasis */\n"
"    /* transition: all 0.3s ease; /* Smooth /* transition for hover and active states */\n"
"}\n"
"\n"
"/* Hover effect for Next button */\n"
"QPushButton:hover {\n"
"    background-color: #00ffcc; /* Neon Aqua for hover */\n"
"    color: #ffffff; /* White text for contrast */\n"
"    border-color: #91ecfe; /* Softer border on hover */\n"
"    /* transform: translateY(-2px); /* Lift the button slightly */\n"
"    /* box-shadow: 0px 6px 12px rgba(0, 0, 0, 0.1); /* Subtle shadow for depth */\n"
"}\n"
"\n"
"/* Active (pressed) effect for Next button */\n"
"QPushButton:pressed {\n"
"    background-color: #1f2a44; /* Midnight Blue when pressed */\n"
"    color: #ffffff; /* White text */\n"
"    border-color: #42ddbc; /* Lighter teal border */\n"
"    /* transform: translateY(2px); /* Slight press effect */\n"
"    /* box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2); /* Subtle shadow for depth */\n"
"}\n"
"\n"
"/* Disabled state for Next button */\n"
"QPushButton:disabled {\n"
"    background-color: #b0b0b0; /* Light gray for disabled state */\n"
"    color: #ffffff; /* White text */\n"
"    border-color: #a0a0a0; /* Softer border */\n"
"    /* box-shadow: none; /* No shadow for disabled state */\n"
"}")
        self.next_button.setText("")
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap(":/icons/icons/NextButton (5).ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.next_button.setIcon(icon7)
        self.next_button.setIconSize(QtCore.QSize(25, 25))
        self.next_button.setObjectName("next_button")
        self.horizontalLayout_6.addWidget(self.next_button, 0, QtCore.Qt.AlignRight)
        self.verticalLayout_11.addLayout(self.horizontalLayout_6)
        self.horizontalLayout_3.addWidget(self.frame_2)
        self.toggle_findings_button_realtime = QtWidgets.QToolButton(self.page)
        self.toggle_findings_button_realtime.setStyleSheet("/* Base style for the burger menu button */\n"
"QToolButton {\n"
"    background-color: transparent; /* Transparent background for a clean look */\n"
"    border: none; /* Remove any border */\n"
"    color: #f1b531; /* Golden Yellow for the icon */\n"
"    font-size: 30px; /* Larger font size for prominence */\n"
"    width: 40px; /* Adjust width for the button */\n"
"    height: 40px; /* Adjust height for the button */\n"
"    padding: 5px; /* Adjust padding */\n"
"    /* cursor: pointer; /* Cursor pointer to indicate it\'s clickable */\n"
"    /* transition: all 0.3s ease-in-out; /* Smooth /* transition for hover and active states */\n"
"}\n"
"\n"
"/* Hover effect for burger menu button */\n"
"QToolButton:hover {\n"
"    background-color: #4d5966; /* Gunmetal Gray background on hover */\n"
"    color: #ffffff; /* White icon for contrast */\n"
"    border-radius: 20px; /* Rounded button on hover */\n"
"    /* box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.3); /* Subtle shadow for depth */\n"
"}\n"
"\n"
"/* Active (pressed) effect for burger menu button */\n"
"QToolButton:pressed {\n"
"    background-color: #1f2a44; /* Midnight Blue background when pressed */\n"
"    color: #f1b531; /* Golden Yellow icon for contrast */\n"
"    /* transform: scale(0.95); /* Slight shrink for the pressed effect */\n"
"    /* box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.2); /* Subtle shadow for depth */\n"
"}\n"
"")
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap(":/icons/icons/Arrow_R (3).ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.toggle_findings_button_realtime.setIcon(icon8)
        self.toggle_findings_button_realtime.setIconSize(QtCore.QSize(50, 50))
        self.toggle_findings_button_realtime.setObjectName("toggle_findings_button_realtime")
        self.horizontalLayout_3.addWidget(self.toggle_findings_button_realtime)
        self.findings_frame_realtime = QtWidgets.QFrame(self.page)
        self.findings_frame_realtime.setMinimumSize(QtCore.QSize(350, 250))
        self.findings_frame_realtime.setStyleSheet("QFrame {\n"
"    background-color: transparent; /* Charcoal Black with transparency for a sleek, modern look */\n"
"    /* filter: blur(5px); /* Reduced blur for better clarity */\n"
"    height: 100%;\n"
"    border-radius: 12px; /* Rounded corners for a modern look */\n"
"    /* transition: background-color 0.3s ease, /* filter 0.3s ease; /* Smooth transitions */\n"
"}")
        self.findings_frame_realtime.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.findings_frame_realtime.setFrameShadow(QtWidgets.QFrame.Raised)
        self.findings_frame_realtime.setObjectName("findings_frame_realtime")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout(self.findings_frame_realtime)
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.verticalLayout_8 = QtWidgets.QVBoxLayout()
        self.verticalLayout_8.setSpacing(5)
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.findings_label_realtime = QtWidgets.QLabel(self.findings_frame_realtime)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(22)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.findings_label_realtime.setFont(font)
        self.findings_label_realtime.setStyleSheet("QLabel {\n"
"    background-color: transparent; /* Transparent background */\n"
"    color: #00ffcc; /* Neon Aqua for the title text */\n"
"    padding-left: 5px; /* Padding for alignment */\n"
"    font: bold; /* Bold text with larger size for emphasis */\n"
"}")
        self.findings_label_realtime.setObjectName("findings_label_realtime")
        self.verticalLayout_8.addWidget(self.findings_label_realtime, 0, QtCore.Qt.AlignHCenter)
        spacerItem22 = QtWidgets.QSpacerItem(20, 5, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.verticalLayout_8.addItem(spacerItem22)
        self.realtime_listview = QtWidgets.QListView(self.findings_frame_realtime)
        self.realtime_listview.setMinimumSize(QtCore.QSize(320, 0))
        self.realtime_listview.setStyleSheet("QListView {\n"
"    background-color: rgba(43, 48, 55, 0.6); /* Charcoal Black with transparency for a sleek effect */\n"
"    border: 2px solid #00ffcc; /* Neon Aqua border */\n"
"}")
        self.realtime_listview.setWordWrap(True)
        self.realtime_listview.setObjectName("realtime_listview")
        self.verticalLayout_8.addWidget(self.realtime_listview, 0, QtCore.Qt.AlignHCenter)
        self.horizontalLayout_7.addLayout(self.verticalLayout_8)
        self.horizontalLayout_3.addWidget(self.findings_frame_realtime)
        self.ui_stackedwidget.addWidget(self.page)
        self.page_2 = QtWidgets.QWidget()
        self.page_2.setObjectName("page_2")
        self.horizontalLayout_11 = QtWidgets.QHBoxLayout(self.page_2)
        self.horizontalLayout_11.setObjectName("horizontalLayout_11")
        self.toggle_menu_button_offline = QtWidgets.QToolButton(self.page_2)
        self.toggle_menu_button_offline.setStyleSheet("/* Base style for the burger menu button */\n"
"QToolButton {\n"
"    background-color: transparent; /* Transparent background for a clean look */\n"
"    border: none; /* Remove any border */\n"
"    color: #f1b531; /* Golden Yellow for the icon */\n"
"    font-size: 30px; /* Larger font size for prominence */\n"
"    width: 40px; /* Adjust width for the button */\n"
"    height: 40px; /* Adjust height for the button */\n"
"    padding: 5px; /* Adjust padding */\n"
"    /* cursor: pointer; /* Cursor pointer to indicate it\'s clickable */\n"
"    /* transition: all 0.3s ease-in-out; /* Smooth /* transition for hover and active states */\n"
"}\n"
"\n"
"/* Hover effect for burger menu button */\n"
"QToolButton:hover {\n"
"    background-color: #4d5966; /* Gunmetal Gray background on hover */\n"
"    color: #ffffff; /* White icon for contrast */\n"
"    border-radius: 20px; /* Rounded button on hover */\n"
"    /* box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.3); /* Subtle shadow for depth */\n"
"}\n"
"\n"
"/* Active (pressed) effect for burger menu button */\n"
"QToolButton:pressed {\n"
"    background-color: #1f2a44; /* Midnight Blue background when pressed */\n"
"    color: #f1b531; /* Golden Yellow icon for contrast */\n"
"    /* transform: scale(0.95); /* Slight shrink for the pressed effect */\n"
"    /* box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.2); /* Subtle shadow for depth */\n"
"}\n"
"")
        self.toggle_menu_button_offline.setText("")
        self.toggle_menu_button_offline.setIcon(icon5)
        self.toggle_menu_button_offline.setIconSize(QtCore.QSize(50, 50))
        self.toggle_menu_button_offline.setCheckable(False)
        self.toggle_menu_button_offline.setPopupMode(QtWidgets.QToolButton.InstantPopup)
        self.toggle_menu_button_offline.setToolButtonStyle(QtCore.Qt.ToolButtonIconOnly)
        self.toggle_menu_button_offline.setAutoRaise(False)
        self.toggle_menu_button_offline.setArrowType(QtCore.Qt.NoArrow)
        self.toggle_menu_button_offline.setObjectName("toggle_menu_button_offline")
        self.horizontalLayout_11.addWidget(self.toggle_menu_button_offline)
        self.frame_4 = QtWidgets.QFrame(self.page_2)
        self.frame_4.setStyleSheet("QFrame {\n"
"    /* background-color: rgba(43, 48, 55, 0.6); /* Charcoal Black with transparency for a sleek, modern look */\n"
"    background-color: transparent;\n"
"    /* /* filter: blur(5px); /* Reduced blur for better clarity */\n"
"    height: 100%;\n"
"    /* border-radius: 12px; /* Rounded corners for a modern look */\n"
"    /* transition: background-color 0.3s ease, /* filter 0.3s ease; /* Smooth transitions */\n"
"}")
        self.frame_4.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_4.setObjectName("frame_4")
        self.verticalLayout_17 = QtWidgets.QVBoxLayout(self.frame_4)
        self.verticalLayout_17.setObjectName("verticalLayout_17")
        self.verticalLayout_18 = QtWidgets.QVBoxLayout()
        self.verticalLayout_18.setObjectName("verticalLayout_18")
        self.stackedWidget_3 = QtWidgets.QStackedWidget(self.frame_4)
        self.stackedWidget_3.setStyleSheet("QStackedWidget {\n"
"    background-color: transparent; /* Charcoal Black with transparency for a sleek, modern look */\n"
"    /* filter: blur(5px); /* Reduced blur for better clarity */\n"
"    height: 100%;\n"
"    border-radius: 12px; /* Rounded corners for a modern look */\n"
"    /* transition: background-color 0.3s ease, /* filter 0.3s ease; /* Smooth transitions */\n"
"}")
        self.stackedWidget_3.setObjectName("stackedWidget_3")
        self.page_5 = QtWidgets.QWidget()
        self.page_5.setObjectName("page_5")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.page_5)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.offline_label = QtWidgets.QLabel(self.page_5)
        self.offline_label.setMaximumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(22)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.offline_label.setFont(font)
        self.offline_label.setStyleSheet("QLabel {\n"
"    background-color: transparent; /* Transparent background */\n"
"    color: #00ffcc; /* Neon Aqua for the title text */\n"
"    padding-left: 5px; /* Padding for alignment */\n"
"    font: bold; /* Bold text with larger size for emphasis */\n"
"}")
        self.offline_label.setObjectName("offline_label")
        self.verticalLayout_4.addWidget(self.offline_label)
        spacerItem23 = QtWidgets.QSpacerItem(20, 5, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.verticalLayout_4.addItem(spacerItem23)
        self.offline_feed = QtWidgets.QLabel(self.page_5)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.offline_feed.sizePolicy().hasHeightForWidth())
        self.offline_feed.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        font.setStrikeOut(False)
        self.offline_feed.setFont(font)
        self.offline_feed.setStyleSheet("QLabel {\n"
"    background-color: #2b3037; /* Charcoal Black background for a sleek, modern look */\n"
"    color: #ffffff; /* White text for visibility */\n"
"    border-radius: 8px; /* Rounded corners for a modern appearance */\n"
"    border: 3px solid #4d5966;\n"
"    /*padding: 10px; /* Padding for content spacing */\n"
"}")
        self.offline_feed.setText("")
        self.offline_feed.setTextFormat(QtCore.Qt.AutoText)
        self.offline_feed.setPixmap(QtGui.QPixmap(":/icons/noVid_icn.png"))
        self.offline_feed.setScaledContents(False)
        self.offline_feed.setAlignment(QtCore.Qt.AlignCenter)
        self.offline_feed.setWordWrap(False)
        self.offline_feed.setObjectName("offline_feed")
        self.verticalLayout_4.addWidget(self.offline_feed)
        self.offline_progressbar = QtWidgets.QProgressBar(self.page_5)
        self.offline_progressbar.setStyleSheet("/* General style for QProgressBar */\n"
"QProgressBar {\n"
"    border: none; /* No border */\n"
"    background: transparent; /* Transparent background */\n"
"    text-align: center; /* Center text inside the progress bar */\n"
"    color: #f1f1f1; /* Light text color */\n"
"    padding: 5px; /* Some padding inside the bar */\n"
"}\n"
"\n"
"/* Style for the progress indicator (filled part of the bar) */\n"
"QProgressBar::chunk {\n"
"    background-color: #00ffcc; /* Neon Aqua for the progress chunk */\n"
"    border-radius: 10px; /* Rounded edges for the progress chunk */\n"
"    width: 20px; /* Minimum width of each progress chunk */\n"
"}\n"
"\n"
"/* Style for the text inside the progress bar */\n"
"QProgressBar::indicator {\n"
"    color: #f1b531; /* Golden Yellow for the text */\n"
"    font-weight: bold;\n"
"}\n"
"")
        self.offline_progressbar.setProperty("value", 24)
        self.offline_progressbar.setObjectName("offline_progressbar")
        self.verticalLayout_4.addWidget(self.offline_progressbar)
        self.stackedWidget_3.addWidget(self.page_5)
        self.verticalLayout_18.addWidget(self.stackedWidget_3)
        self.verticalLayout_17.addLayout(self.verticalLayout_18)
        spacerItem24 = QtWidgets.QSpacerItem(20, 10, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.verticalLayout_17.addItem(spacerItem24)
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_9.setSpacing(0)
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.offline_start_button = QtWidgets.QPushButton(self.frame_4)
        self.offline_start_button.setMaximumSize(QtCore.QSize(150, 50))
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(12)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.offline_start_button.setFont(font)
        self.offline_start_button.setStyleSheet("/* Base style for QPushButton */\n"
"QPushButton {\n"
"    background-color:#00ffcc ; /* Charcoal Black background for a modern, robust feel */\n"
"    color: #2b3037; /* Neon Aqua text for a vibrant, futuristic look */\n"
"    border: 2px solid #2b3037; /* Neon Aqua border to maintain consistency */\n"
"    border-radius: 10px; /* Smooth rounded corners */\n"
"    padding: 12px 24px; /* Adjust padding for size */\n"
"    /* font: bold 14px \"Cascadia Code\", Arial, sans-serif; /* Clean modern font */\n"
"    letter-spacing: 1px; /* Slight letter spacing for elegance */\n"
"    text-transform: uppercase; /* Capitalized text for emphasis */\n"
"    /* transition: all 0.3s ease; /* Smooth animations */\n"
"\n"
"}\n"
"\n"
"/* Hover effect */\n"
"QPushButton:hover {\n"
"    background-color: #1f2a44; /* Neon Aqua for the hover background */\n"
"    color: #00ffcc; /* Midnight Blue for contrast text */\n"
"    border-color: #00ffcc; /* Keep the border the same on hover */\n"
"    /* transform: translateY(-2px); /* Lift the button slightly */\n"
"    /* box-shadow: 0px 8px 15px rgba(0, 255, 204, 0.3); /* Soft glow effect */\n"
"}\n"
"\n"
"/* Pressed (clicked) effect */\n"
"QPushButton:pressed {\n"
"    background-color: #1f2a44; /* Midnight Blue background on press */\n"
"    color: #ffffff; /* White text for contrast */\n"
"    border-color: #4d5966; /* Gunmetal Gray border on press */\n"
"    /* transform: translateY(2px); /* Slight press effect */\n"
"    /* box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2); /* Subtle shadow */\n"
"}\n"
"\n"
"/* Disabled state */\n"
"QPushButton:disabled {\n"
"    background-color: #4d5966; /* Gunmetal Gray for disabled state */\n"
"    color: #ffffff; /* White text */\n"
"    border-color: #4d5966; /* Matching border */\n"
"    /* box-shadow: none; /* No shadow for disabled */\n"
"}")
        self.offline_start_button.setObjectName("offline_start_button")
        self.horizontalLayout_9.addWidget(self.offline_start_button)
        spacerItem25 = QtWidgets.QSpacerItem(100, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_9.addItem(spacerItem25)
        self.offline_stop_button = QtWidgets.QPushButton(self.frame_4)
        self.offline_stop_button.setMaximumSize(QtCore.QSize(150, 100))
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.offline_stop_button.setFont(font)
        self.offline_stop_button.setStyleSheet("/* Base style for QPushButton */\n"
"QPushButton {\n"
"    background-color: #f1b531; /* Charcoal Black background for a modern, robust feel */\n"
"    color: #2b3037; /* White text for clarity */\n"
"    border: 2px solid #2b3037; /* Golden Yellow border for a vibrant contrast */\n"
"    border-radius: 10px; /* Smooth rounded corners */\n"
"    padding: 12px 24px; /* Adjust padding for size */\n"
"    /* font: bold 14px \"Segoe UI\", Arial, sans-serif; /* Clean modern font */\n"
"    letter-spacing: 1px; /* Slight letter spacing for elegance */\n"
"    text-transform: uppercase; /* Capitalized text for emphasis */\n"
"    /* transition: all 0.3s ease; /* Smooth animations */\n"
"}\n"
"\n"
"/* Hover effect */\n"
"QPushButton:hover {\n"
"    background-color:#1f2a44; /* Golden Yellow for the hover background */\n"
"    color:  #f1b531; /* Midnight Blue text for contrast */\n"
"    border-color:  #f1b531; /* Softer Golden Yellow border on hover */\n"
"    /* transform: translateY(-2px); /* Lift the button slightly */\n"
"    /* box-shadow: 0px 8px 15px rgba(241, 181, 49, 0.3); /* Soft golden glow effect */\n"
"}\n"
"\n"
"/* Pressed (clicked) effect */\n"
"QPushButton:pressed {\n"
"    background-color: #1f2a44; /* Midnight Blue background on press */\n"
"    color: #ffffff; /* White text for contrast */\n"
"    border-color: #4d5966; /* Gunmetal Gray border on press */\n"
"    /* transform: translateY(2px); /* Slight press effect */\n"
"    /* box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2); /* Subtle shadow */\n"
"}\n"
"\n"
"/* Disabled state */\n"
"QPushButton:disabled {\n"
"    background-color: #4d5966; /* Gunmetal Gray for disabled state */\n"
"    color: #ffffff; /* White text */\n"
"    border-color: #4d5966; /* Matching border */\n"
"    /* box-shadow: none; /* No shadow for disabled */\n"
"}")
        self.offline_stop_button.setObjectName("offline_stop_button")
        self.horizontalLayout_9.addWidget(self.offline_stop_button)
        self.verticalLayout_17.addLayout(self.horizontalLayout_9)
        self.horizontalLayout_11.addWidget(self.frame_4)
        self.toggle_findings_button_offline = QtWidgets.QToolButton(self.page_2)
        self.toggle_findings_button_offline.setStyleSheet("/* Base style for the burger menu button */\n"
"QToolButton {\n"
"    background-color: transparent; /* Transparent background for a clean look */\n"
"    border: none; /* Remove any border */\n"
"    color: #f1b531; /* Golden Yellow for the icon */\n"
"    font-size: 30px; /* Larger font size for prominence */\n"
"    width: 40px; /* Adjust width for the button */\n"
"    height: 40px; /* Adjust height for the button */\n"
"    padding: 5px; /* Adjust padding */\n"
"    /* cursor: pointer; /* Cursor pointer to indicate it\'s clickable */\n"
"    /* transition: all 0.3s ease-in-out; /* Smooth /* transition for hover and active states */\n"
"}\n"
"\n"
"/* Hover effect for burger menu button */\n"
"QToolButton:hover {\n"
"    background-color: #4d5966; /* Gunmetal Gray background on hover */\n"
"    color: #ffffff; /* White icon for contrast */\n"
"    border-radius: 20px; /* Rounded button on hover */\n"
"    /* box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.3); /* Subtle shadow for depth */\n"
"}\n"
"\n"
"/* Active (pressed) effect for burger menu button */\n"
"QToolButton:pressed {\n"
"    background-color: #1f2a44; /* Midnight Blue background when pressed */\n"
"    color: #f1b531; /* Golden Yellow icon for contrast */\n"
"    /* transform: scale(0.95); /* Slight shrink for the pressed effect */\n"
"    /* box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.2); /* Subtle shadow for depth */\n"
"}\n"
"")
        self.toggle_findings_button_offline.setIcon(icon8)
        self.toggle_findings_button_offline.setIconSize(QtCore.QSize(50, 50))
        self.toggle_findings_button_offline.setObjectName("toggle_findings_button_offline")
        self.horizontalLayout_11.addWidget(self.toggle_findings_button_offline)
        self.findings_frame_offline = QtWidgets.QFrame(self.page_2)
        self.findings_frame_offline.setMinimumSize(QtCore.QSize(350, 250))
        self.findings_frame_offline.setStyleSheet("QFrame {\n"
"    /* background-color: rgba(43, 48, 55, 0.6); /* Charcoal Black with transparency for a sleek, modern look */\n"
"    background-color: transparent;\n"
"    /* filter: blur(5px); /* Reduced blur for better clarity */\n"
"    height: 100%;\n"
"    border-radius: 12px; /* Rounded corners for a modern look */\n"
"    /* transition: background-color 0.3s ease, /* filter 0.3s ease; /* Smooth transitions */\n"
"}")
        self.findings_frame_offline.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.findings_frame_offline.setFrameShadow(QtWidgets.QFrame.Raised)
        self.findings_frame_offline.setObjectName("findings_frame_offline")
        self.horizontalLayout_10 = QtWidgets.QHBoxLayout(self.findings_frame_offline)
        self.horizontalLayout_10.setObjectName("horizontalLayout_10")
        self.verticalLayout_20 = QtWidgets.QVBoxLayout()
        self.verticalLayout_20.setSpacing(5)
        self.verticalLayout_20.setObjectName("verticalLayout_20")
        self.findings_label_offline = QtWidgets.QLabel(self.findings_frame_offline)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(22)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.findings_label_offline.setFont(font)
        self.findings_label_offline.setStyleSheet("QLabel {\n"
"    background-color: transparent; /* Transparent background */\n"
"    color: #00ffcc; /* Neon Aqua for the title text */\n"
"    padding-left: 5px; /* Padding for alignment */\n"
"    font: bold; /* Bold text with larger size for emphasis */\n"
"}")
        self.findings_label_offline.setObjectName("findings_label_offline")
        self.verticalLayout_20.addWidget(self.findings_label_offline, 0, QtCore.Qt.AlignHCenter)
        spacerItem26 = QtWidgets.QSpacerItem(20, 5, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.verticalLayout_20.addItem(spacerItem26)
        self.offline_listview = QtWidgets.QListView(self.findings_frame_offline)
        self.offline_listview.setMinimumSize(QtCore.QSize(320, 0))
        self.offline_listview.setStyleSheet("QListView {\n"
"    background-color: rgba(43, 48, 55, 0.6); /* Charcoal Black with transparency for a sleek effect */\n"
"    border: 2px solid #00ffcc; /* Neon Aqua border */\n"
"}")
        self.offline_listview.setWordWrap(True)
        self.offline_listview.setObjectName("offline_listview")
        self.verticalLayout_20.addWidget(self.offline_listview, 0, QtCore.Qt.AlignHCenter)
        self.horizontalLayout_10.addLayout(self.verticalLayout_20)
        self.horizontalLayout_11.addWidget(self.findings_frame_offline)
        self.ui_stackedwidget.addWidget(self.page_2)
        self.horizontalLayout.addWidget(self.ui_stackedwidget)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        self.toolBox_3.setCurrentIndex(0)
        self.toolBox_2.setCurrentIndex(0)
        self.ui_stackedwidget.setCurrentIndex(0)
        self.realtime_stackedwidget.setCurrentIndex(0)
        self.stackedWidget_3.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        ###############     NAVIGATION FUNCTIONALITY ###############

        self.next_button.clicked.connect(self.realtime_cam_nav_next)
        self.prev_button.clicked.connect(self.realtime_cam_nav_prev)
        self.tabWidget.currentChanged.connect(self.tab_navigation) # Connect the tab changed signal to update stacked widget
        self.toggle_menu_button_realtime.clicked.connect(self.toggle_menu) # Connect the button to the toggle function
        self.toggle_menu_button_offline.clicked.connect(self.toggle_menu2)
        self.toggle_findings_button_realtime.clicked.connect(self.toggle_findings)
        self.toggle_findings_button_offline.clicked.connect(self.toggle_findings2)
        self.realtime_archive_pushbutton.clicked.connect(self.open_realtime_archive)

        ############### MODEL SELECTION ###############

        # Automatically load model PT files
        self.realtime_modelselection.clear()
        self.detect_pt_Path = "./ptmodels"
        self.detect_pt_list = os.listdir('./ptmodels')
        self.detect_pt_list = [file for file in self.detect_pt_list if file.endswith('.pt')]
        self.detect_pt_list.sort(key=lambda x: os.path.getsize('./ptmodels/' + x))
        self.realtime_modelselection.clear()
        self.realtime_modelselection.addItems(self.detect_pt_list)

        # Automatically load model PT files
        self.offline_modelselection.clear()
        self.detect_pt_Path = "./ptmodels"
        self.detect_pt_list = os.listdir('./ptmodels')
        self.detect_pt_list = [file for file in self.detect_pt_list if file.endswith('.pt')]
        self.detect_pt_list.sort(key=lambda x: os.path.getsize('./ptmodels/' + x))
        self.offline_modelselection.clear()
        self.offline_modelselection.addItems(self.detect_pt_list)

        ############### THRESHOLD SETTING ###############

        self.realtime_conf_horizontalslider.valueChanged.connect(self.update_conf_spinbox)
        self.realtime_conf_spinbox.valueChanged.connect(self.update_conf_slider)
        self.realtime_iou_horizontalslider.valueChanged.connect(self.update_iou_spinbox)
        self.realtime_iou_spinbox.valueChanged.connect(self.update_iou_slider)

        self.offline_conf_horizontalslider.valueChanged.connect(self.update_conf_spinbox2)
        self.offline_conf_spinbox.valueChanged.connect(self.update_conf_slider2)
        self.offline_iou_horizontalslider.valueChanged.connect(self.update_iou_spinbox2)
        self.offline_iou_spinbox.valueChanged.connect(self.update_iou_slider2)


        ############### REALTIME SETTING ###############

        # Connect signals
        self.realtime_conf_horizontalslider.valueChanged.connect(self.update_thresholds)
        self.realtime_conf_spinbox.valueChanged.connect(self.update_thresholds)
        self.realtime_iou_horizontalslider.valueChanged.connect(self.update_thresholds)
        self.realtime_iou_spinbox.valueChanged.connect(self.update_thresholds)

        self.realtime_apply_button.clicked.connect(self.apply_settings)
        self.realtime_start_button.clicked.connect(self.start_processing)
        self.realtime_stop_button.clicked.connect(self.stop_process)
        self.realtime_reset_button_2.clicked.connect(self.reset_settings)

        self.realtime_stop_button.setEnabled(False)  # Disable the stop button initially
        self.realtime_stop_button.setToolTip("Start the backend process to enable this button.")

        # Initialize backend process and queues
        self.input_queue = Queue()
        self.output_queue = Queue()

        self.backend_process = None

        # Timer to update the video feed
        self.timer = QTimer()
        self.timer.timeout.connect(self.update_video_feed)

        ############### DEFAULTING PARAMETERS IN REALTIME SETTING ###############

        # Load default parameters from config.yaml
        self.default_params = self.load_default_parameters()

        # Set default parameters in the UI
        self.set_default_parameters()

        ############### RECORDING ###############

        self.is_recording_enabled = True  # Default: Recording is enabled

        self.no_recording_radiobutton.clicked.connect(self.toggle_recording)
        

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "NeoLensa"))
        self.label_21.setText(_translate("MainWindow", "Input"))
        self.label_2.setText(_translate("MainWindow", "Cam 1:"))
        self.label_11.setText(_translate("MainWindow", "Cam 2:"))
        self.label_12.setText(_translate("MainWindow", "Model selection"))
        self.label_22.setText(_translate("MainWindow", "Threshold"))
        self.label_25.setText(_translate("MainWindow", "Conf:"))
        self.label_24.setText(_translate("MainWindow", "IoU:"))
        self.no_recording_radiobutton.setText(_translate("MainWindow", " Recording Enabled"))
        self.realtime_archive_pushbutton.setText(_translate("MainWindow", "            Archive               "))
        self.toolBox_3.setItemText(self.toolBox_3.indexOf(self.realtime_setting_heading), _translate("MainWindow", "Settings"))
        self.realtime_ClassNames_radiobutton.setText(_translate("MainWindow", "class_name"))
        self.toolBox_3.setItemText(self.toolBox_3.indexOf(self.filter_header_3), _translate("MainWindow", "Filters"))
        self.realtime_reset_button_2.setText(_translate("MainWindow", "Reset"))
        self.realtime_apply_button.setText(_translate("MainWindow", "Apply"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.realtime_tab), _translate("MainWindow", "Realtime"))
        self.open_dir_button.setText(_translate("MainWindow", "Open\n"
"directory"))
        self.upload_button.setText(_translate("MainWindow", "Upload\n"
"file"))
        self.label_13.setText(_translate("MainWindow", "Model selection"))
        self.label_23.setText(_translate("MainWindow", "Threshold"))
        self.label_19.setText(_translate("MainWindow", "Conf:"))
        self.label_20.setText(_translate("MainWindow", "IoU:"))
        self.toolBox_2.setItemText(self.toolBox_2.indexOf(self.offline_setting_heading), _translate("MainWindow", "Settings"))
        self.toolBox_2.setItemToolTip(self.toolBox_2.indexOf(self.offline_setting_heading), _translate("MainWindow", "<html><head/><body><p>Settings for offline video/image processing.</p></body></html>"))
        self.offline_ClassNames_radiobutton.setText(_translate("MainWindow", "class_name"))
        self.toolBox_2.setItemText(self.toolBox_2.indexOf(self.filter_header_2), _translate("MainWindow", "Filters"))
        self.offline_reset_button.setText(_translate("MainWindow", "Reset"))
        self.offline_apply_button.setText(_translate("MainWindow", "Apply"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.offline_tab), _translate("MainWindow", "Offline"))
        self.Cam1_label.setText(_translate("MainWindow", "Cam 1"))
        self.Cam2_label.setText(_translate("MainWindow", "Cam 2"))
        self.realtime_start_button.setText(_translate("MainWindow", "Start"))
        self.realtime_stop_button.setText(_translate("MainWindow", "Stop"))
        self.toggle_findings_button_realtime.setText(_translate("MainWindow", "..."))
        self.findings_label_realtime.setText(_translate("MainWindow", "Findings"))
        self.offline_label.setText(_translate("MainWindow", "Offline"))
        self.offline_start_button.setText(_translate("MainWindow", "Start"))
        self.offline_stop_button.setText(_translate("MainWindow", "Stop"))
        self.toggle_findings_button_offline.setText(_translate("MainWindow", "..."))
        self.findings_label_offline.setText(_translate("MainWindow", "Findings"))

##############################################################################################################################################

    def resizeEvent(self, event):
        """Resize background image dynamically."""
        self.bg_label.setGeometry(0, 0, self.bg_label.parent().width(), self.bg_label.parent().height())
        self.bg_label.setPixmap(self.bg_pixmap.scaled(
                self.bg_label.size(), QtCore.Qt.KeepAspectRatioByExpanding, QtCore.Qt.SmoothTransformation
        ))

############### NAVIGATION FUNCTIONALITY ###############

    def navigate_offline_page(self):
        self.ui_stackedwidget.setCurrentIndex(1)

    def navigate_realtime_page(self):
        self.ui_stackedwidget.setCurrentIndex(0)

    def realtime_cam_nav_next(self):
        current_index = self.realtime_stackedwidget.currentIndex()
        next_index = (current_index + 1) % self.realtime_stackedwidget.count()
        self.realtime_stackedwidget.setCurrentIndex(next_index)

    def realtime_cam_nav_prev(self):
        current_index = self.realtime_stackedwidget.currentIndex()
        prev_index = (current_index - 1) % self.realtime_stackedwidget.count()
        self.realtime_stackedwidget.setCurrentIndex(prev_index)

    def tab_navigation(self, index):
        """Change QStackedWidget index when tab changes"""
        if index == 0:
            self.ui_stackedwidget.setCurrentIndex(0)  # When "Tab 1" is clicked, go to Page 2
        else:
            self.ui_stackedwidget.setCurrentIndex(1)

    def toggle_menu(self):
        """Toggle the visibility of menu_frame"""
        if self.menu_frame.isVisible():
            self.menu_frame.hide()
            self.toggle_menu_button_realtime.setIcon(QIcon(":/icons/icons/MenuButton (3).ico"))  # Menu closed
        else:
            self.menu_frame.show()
            self.toggle_menu_button_realtime.setIcon(QIcon(":/icons/icons/MenuButton (2).ico"))  # Menu opened

    def toggle_menu2(self):
        """Toggle the visibility of menu_frame"""
        if self.menu_frame.isVisible():
            self.menu_frame.hide()
            self.toggle_menu_button_offline.setIcon(QIcon(":/icons/icons/MenuButton (3).ico"))  # Menu closed
        else:
            self.menu_frame.show()
            self.toggle_menu_button_offline.setIcon(QIcon(":/icons/icons/MenuButton (2).ico"))  # Menu opened

    def toggle_findings(self):
        """Toggle the visibility of menu_frame"""
        if self.findings_frame_realtime.isVisible():
            self.findings_frame_realtime.hide()
            self.toggle_findings_button_realtime.setIcon(QIcon(":/icons/icons/Arrow_L (3).ico"))  # Menu closed
        else:
            self.findings_frame_realtime.show()
            self.toggle_findings_button_realtime.setIcon(QIcon(":/icons/icons/Arrow_R (3).ico"))  # Menu opened

    def toggle_findings2(self):
        """Toggle the visibility of menu_frame"""
        if self.findings_frame_offline.isVisible():
            self.findings_frame_offline.hide()
            self.toggle_findings_button_offline.setIcon(QIcon(":/icons/icons/Arrow_L (3).ico"))  # Menu closed
        else:
            self.findings_frame_offline.show()
            self.toggle_findings_button_offline.setIcon(QIcon(":/icons/icons/Arrow_R (3).ico"))  # Menu opened

    def open_realtime_archive(self):
        folder_path = os.path.abspath("RealtimeArchive")  # Adjust path if needed
        QDesktopServices.openUrl(QUrl.fromLocalFile(folder_path))

############### THRESHOLD SETTING ###############      

    def update_conf_spinbox(self, value):
        self.realtime_conf_spinbox.setValue(int(value))  # Update spinbox with integer value
        
    def update_conf_spinbox2(self, value):
        self.offline_conf_spinbox.setValue(int(value))  # Update spinbox with integer value

    def update_conf_slider(self, value):
        # Update slider when spinbox value changes
        self.realtime_conf_horizontalslider.setValue(int(value))
        
    def update_conf_slider2(self, value):
        self.offline_conf_horizontalslider.setValue(int(value))

    def update_iou_spinbox(self, value):
        self.realtime_iou_spinbox.setValue(int(value))  # Update spinbox with integer value
        
    def update_iou_spinbox2(self, value):
        self.offline_iou_spinbox.setValue(int(value))  # Update spinbox with integer value

    def update_iou_slider(self, value):
        # Update slider when spinbox value changes
        self.realtime_iou_horizontalslider.setValue(int(value))
        
    def update_iou_slider2(self, value):
        self.offline_iou_horizontalslider.setValue(int(value))

############### REALTIME SETTING ###############

    def apply_settings(self):
        """Send settings to the backend."""
        # Check if the backend process is running
        if self.backend_process is not None and self.backend_process.is_alive():
                print("Error: Cannot apply settings while the video is running.")
                return

        # Check if the input queue is initialized
        if self.input_queue is None:
                print("Error: Input queue is not initialized.")
                return

        # Get current values from UI controls
        camera_ids = [
                self.realtime_lineedit1.text().strip(),  # Camera 1 input
                self.realtime_lineedit2.text().strip(),  # Camera 2 input
        ]
        model_name = self.realtime_modelselection.currentText()
        model_path = f"./ptmodels/{model_name}"
        conf_thres = self.realtime_conf_horizontalslider.value() / 100
        iou_thres = self.realtime_iou_horizontalslider.value() / 100

        # Get recording state from the UI
        is_recording_enabled = not self.no_recording_radiobutton.isChecked()  # Inverted logic

        # Debug prints
        print(f"Applying settings: Model={model_path}, Conf={conf_thres}, IOU={iou_thres}, Recording={'Enabled' if is_recording_enabled else 'Disabled'}")

        # Send settings to the backend (only when the process is stopped)
        self.input_queue.put(("update_model", model_path, camera_ids, is_recording_enabled))
        self.input_queue.put(("update_thresholds", conf_thres, iou_thres))
        print("Settings applied.")


    def reset_settings(self):
        """Reset settings to default values."""
        # Check if the backend process is running
        if self.backend_process is not None and self.backend_process.is_alive():
                print("Error: Cannot reset settings while the video is running.")
                return

        # Reset UI controls to default values
        self.realtime_conf_horizontalslider.setValue(50)  # Default confidence threshold (90%)
        self.realtime_conf_spinbox.setValue(50)
        self.realtime_iou_horizontalslider.setValue(45)  # Default IOU threshold (45%)
        self.realtime_iou_spinbox.setValue(45)
        self.realtime_modelselection.setCurrentText("yolov7.pt")  # Default model

        print("Settings reset to default values.")


    def start_processing(self):
        """Start the backend process."""
        # Ensure the previous process is stopped
        self.stop_process()

        # Reinitialize queues
        self.input_queue = Queue()
        self.output_queue = Queue()

        # Define the camera ID mapping
        camera_id_map = {
                self.realtime_lineedit1.text().strip(): "Cam1",
                self.realtime_lineedit2.text().strip(): "Cam2"
        }

        # Get initial settings from the UI
        camera_ids = []
        if self.realtime_lineedit1.text().strip():  # Check if Camera 1 input is not empty
                camera_ids.append(self.realtime_lineedit1.text().strip())
        if self.realtime_lineedit2.text().strip():  # Check if Camera 2 input is not empty
                camera_ids.append(self.realtime_lineedit2.text().strip())

        # If no camera IDs are provided, use a default camera (e.g., 0)
        if not camera_ids:
                camera_ids = ['0']  # Default camera ID

        # Debug: Print the camera IDs being sent to the backend
        print(f"Camera IDs being sent to backend: {camera_ids}")

        model_name = self.realtime_modelselection.currentText()
        model_path = f"./ptmodels/{model_name}"
        conf_thres = self.realtime_conf_horizontalslider.value() / 100
        iou_thres = self.realtime_iou_horizontalslider.value() / 100

        # Get recording state from the UI
        is_recording_enabled = not self.no_recording_radiobutton.isChecked()  # Inverted logic

        # Debug prints
        print(f"Starting backend with settings: Model={model_path}, Cameras={camera_ids}, Conf={conf_thres}, IOU={iou_thres}, Recording={'Enabled' if is_recording_enabled else 'Disabled'}")

        # Send initial settings to the backend
        if self.input_queue is not None:
                self.input_queue.put(("update_model", model_path, camera_ids, is_recording_enabled))
                self.input_queue.put(("update_thresholds", conf_thres, iou_thres))
                print(f"Sent initial thresholds to backend: Conf={conf_thres}, IOU={iou_thres}")

        # Start the backend process
        self.backend_process = Process(
                target=run_inference,
                args=(self.input_queue, self.output_queue, camera_id_map),  # Pass camera_id_map here
        )
        self.backend_process.start()

        # Disable settings UI controls (including the start button)
        self.disable_settings_ui()

        # Enable the stop button
        self.realtime_stop_button.setEnabled(True)
        self.realtime_stop_button.setToolTip("Stop the backend process.")

        # Start the timer to update the video feed
        self.timer.start(30)  # Update every 30 ms
        print("Backend process started.")


    def update_thresholds(self):
        """Update confidence and IOU thresholds dynamically."""
        # Get current values from QSlider or QSpinBox
        conf_thres = self.realtime_conf_horizontalslider.value() / 100  # Convert to float between 0 and 1
        iou_thres = self.realtime_iou_horizontalslider.value() / 100  # Convert to float between 0 and 1

        # Debug prints
        # print(f"Sending updated thresholds to backend: Conf={conf_thres}, IOU={iou_thres}")

        # Send updated thresholds to the backend
        if self.input_queue is not None:
                self.input_queue.put(("update_thresholds", conf_thres, iou_thres))


    def stop_process(self):
        """Stop the entire process gracefully."""
        # Disable the stop button immediately after it is clicked
        self.realtime_stop_button.setEnabled(False)
        self.realtime_stop_button.setToolTip("Start the backend process to enable this button.")

        # Send a stop signal to the backend
        if self.input_queue is not None:
                self.input_queue.put("stop")  # Send a stop signal to the backend

        # Stop the QTimer that updates the video feed
        if self.timer.isActive():
                self.timer.stop()

        # Clean up resources (e.g., release cameras, close queues)
        if self.backend_process is not None:
                if self.backend_process.is_alive():
                        self.backend_process.join(timeout=5)  # Wait for the backend process to finish
                if self.backend_process.is_alive():
                        self.backend_process.terminate()  # Forcefully terminate if it doesn't stop
                self.backend_process = None

        # Clear the video feed
        self.Cam1_feed.clear()
        self.Cam2_feed.clear()

        # Clear the queues to avoid leftover data
        if self.input_queue is not None:
                while not self.input_queue.empty():
                        self.input_queue.get()
        if self.output_queue is not None:
                while not self.output_queue.empty():
                        self.output_queue.get()

        # Re-enable settings UI controls (including the start button)
        self.enable_settings_ui()

        print("Process stopped gracefully.")


    def update_video_feed(self):
        """Update the video feed with processed frames from the backend."""
        if self.output_queue is None:
                print("Error: Output queue is not initialized.")
                return

        if self.output_queue.empty():
                # print("No frames in the output queue.")
                return

        # Get the latest frame from the queue
        try:
                frame, camera_id = self.output_queue.get_nowait()  # Non-blocking get
                # print(f"Frame received from backend for camera {camera_id}.")
        except Empty:
                print("No frames available in the queue.")
                return  # No frames in the queue

        # Debug: Print the frame and its type
        # print("Frame:", frame)
        # print("Frame type:", type(frame))

        # Check if the frame is valid
        if frame is None:
                print("Error: Frame is None")
                return

        # Ensure the frame is a NumPy array
        if not isinstance(frame, np.ndarray):
                print(f"Error: Frame is not a NumPy array. Type: {type(frame)}")
                return

        # Convert the frame to QImage
        try:
                frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        except Exception as e:
                print(f"Error converting frame to RGB: {e}")
                return

        h, w, ch = frame_rgb.shape
        bytes_per_line = ch * w
        q_img = QImage(frame_rgb.data, w, h, bytes_per_line, QImage.Format_RGB888)

        # Convert QImage to QPixmap
        pixmap = QPixmap.fromImage(q_img)

        # Scale the QPixmap to fit or cover the QLabel while maintaining aspect ratio
        if camera_id == self.realtime_lineedit1.text().strip():  # Camera 1
                self.Cam1_feed.setPixmap(
                pixmap.scaled(
                        self.Cam1_feed.size(),
                        Qt.KeepAspectRatioByExpanding,  # Use Qt.KeepAspectRatio for fit
                        Qt.SmoothTransformation
                )
                )
        elif camera_id == self.realtime_lineedit2.text().strip():  # Camera 2
                self.Cam2_feed.setPixmap(
                pixmap.scaled(
                        self.Cam2_feed.size(),
                        Qt.KeepAspectRatioByExpanding,  # Use Qt.KeepAspectRatio for fit
                        Qt.SmoothTransformation
                )
                )


    def closeEvent(self, event):
        """Clean up the backend process when the window is closed."""
        self.stop_process()  # Ensure the process is stopped
        event.accept()


    def disable_settings_ui(self):
        """Disable settings-related UI controls and set tooltips."""
        self.realtime_conf_horizontalslider.setEnabled(False)
        self.realtime_conf_horizontalslider.setToolTip("Stop the video to adjust this setting.")
        self.realtime_conf_spinbox.setEnabled(False)
        self.realtime_conf_spinbox.setToolTip("Stop the video to adjust this setting.")
        self.realtime_iou_horizontalslider.setEnabled(False)
        self.realtime_iou_horizontalslider.setToolTip("Stop the video to adjust this setting.")
        self.realtime_iou_spinbox.setEnabled(False)
        self.realtime_iou_spinbox.setToolTip("Stop the video to adjust this setting.")
        self.realtime_modelselection.setEnabled(False)
        self.realtime_modelselection.setToolTip("Stop the video to adjust this setting.")
        self.realtime_lineedit1.setEnabled(False)
        self.realtime_lineedit1.setToolTip("Stop the video to adjust this setting.")
        self.realtime_lineedit2.setEnabled(False)
        self.realtime_lineedit2.setToolTip("Stop the video to adjust this setting.")
        self.realtime_apply_button.setEnabled(False)
        self.realtime_apply_button.setToolTip("Stop the video to apply settings.")
        self.realtime_reset_button_2.setEnabled(False)
        self.realtime_reset_button_2.setToolTip("Stop the video to reset settings.")

        # Disable recording radio button
        self.no_recording_radiobutton.setEnabled(False)
        self.no_recording_radiobutton.setToolTip("Stop the video to adjust this setting.")

        # Disable the start button
        self.realtime_start_button.setEnabled(False)
        self.realtime_start_button.setToolTip("Process is already running.")

        # Enable the stop button (since the backend process is running)
        self.realtime_stop_button.setEnabled(True)
        self.realtime_stop_button.setToolTip("Stop the backend process.")


    def enable_settings_ui(self):
        """Enable settings-related UI controls."""
        self.realtime_conf_horizontalslider.setEnabled(True)
        self.realtime_conf_spinbox.setEnabled(True)
        self.realtime_iou_horizontalslider.setEnabled(True)
        self.realtime_iou_spinbox.setEnabled(True)
        self.realtime_modelselection.setEnabled(True)
        self.realtime_lineedit1.setEnabled(True)
        self.realtime_lineedit2.setEnabled(True)
        self.realtime_apply_button.setEnabled(True)
        self.realtime_reset_button_2.setEnabled(True)

        # Enable recording radio button
        self.no_recording_radiobutton.setEnabled(True)
        self.no_recording_radiobutton.setToolTip("Toggle recording on/off.")

        # Enable the start button
        self.realtime_start_button.setEnabled(True)
        self.realtime_start_button.setToolTip("Start the backend process.")

        # Disable the stop button (since the backend process is not running)
        self.realtime_stop_button.setEnabled(False)
        self.realtime_stop_button.setToolTip("Start the backend process to enable this button.")


    def load_default_parameters(self):
        """Load default parameters from config.yaml."""
        try:
            with open("default_config.yaml", "r") as file:
                return yaml.safe_load(file)
        except FileNotFoundError:
            print("Error: config.yaml not found. Using fallback defaults.")
            return {
                "model": "yolov7.pt",
                "conf_thres": 0.5,
                "iou_thres": 0.45,
            }


    def set_default_parameters(self):
        """Set default parameters in the UI."""
        # Set model
        self.realtime_modelselection.setCurrentText(self.default_params["model"])

        # Set confidence threshold
        self.realtime_conf_horizontalslider.setValue(int(self.default_params["conf_thres"] * 100))
        self.realtime_conf_spinbox.setValue(int(self.default_params["conf_thres"] * 100))

        # Set IOU threshold
        self.realtime_iou_horizontalslider.setValue(int(self.default_params["iou_thres"] * 100))
        self.realtime_iou_spinbox.setValue(int(self.default_params["iou_thres"] * 100))

############### RECORDING FUNCTION ###############

    def toggle_recording(self):
        """Toggle recording on/off."""
        if self.no_recording_radiobutton.isChecked():
                # Disable recording
                self.is_recording_enabled = False
                self.no_recording_radiobutton.setText("Recording Disabled")
                print("Recording disabled.")
        else:
                # Enable recording
                self.is_recording_enabled = True
                self.no_recording_radiobutton.setText("Recording Enabled")
                print("Recording enabled.")

        # Debug: Print the recording state
        print(f"Recording state: {'Enabled' if self.is_recording_enabled else 'Disabled'}")

        # Send the recording state to the backend
        if self.input_queue is not None:
                self.input_queue.put(("update_recording_state", self.is_recording_enabled))
                print(f"Sent recording state to backend: {'Enabled' if self.is_recording_enabled else 'Disabled'}")



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    # app.aboutToQuit.connect(on_exit)
    sys.exit(app.exec_())
